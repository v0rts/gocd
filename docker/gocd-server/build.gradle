import com.thoughtworks.go.build.docker.BuildDockerImageTask
import com.thoughtworks.go.build.docker.Distro
import com.thoughtworks.go.build.docker.DistroVersion
import com.thoughtworks.go.build.docker.ImageType
import groovy.json.JsonOutput
import org.apache.tools.ant.util.TeeOutputStream

/*
 * Copyright 2024 Thoughtworks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'base'
}

subprojects {
  apply plugin: 'base'
  project.buildDir = file("${parent.buildDir}/${project.name}")

  // detect the distro name and version from the project name.
  // For e.g. `centos-6` will map to `Distro.centos` and version `6` as returned by `Distro.centos.supportedVersions`
  def distroName = project.name.split('-').first()
  Distro distro = Distro.valueOf(distroName)

  if (!project.name.startsWith("${distro.name()}-")) {
    throw new GradleException("Did you initialize the project ${project.path} with the wrong distro(${distro.name()})?".toString())
  }

  def distroVersionOnProject = project.name.replaceFirst("${distro.name()}-", "")
  DistroVersion distroVersion = distro.getVersion(distroVersionOnProject)

  project.tasks.create("docker", BuildDockerImageTask.class) { BuildDockerImageTask task ->
    task.dependsOn ':docker:initializeBuildx'
    assemble.dependsOn(task)

    if (project.hasProperty('dockerBuildLocalZip')) {
      task.dependsOn ':installers:serverGenericZip'
      task.artifactZip = rootProject.project(':installers').tasks.getByName('serverGenericZip').outputs.files.singleFile
    } else if (project.hasProperty('dockerbuildServerZipLocation')) {
      task.artifactZip = project.file(project.dockerbuildServerZipLocation)
    } else {
      task.doFirst {
        throw new GradleException("You must specify either -PdockerBuildLocalZip or -PdockerbuildServerZipLocation=/path/to/server.zip")
      }
    }

    task.description = "Generate the dockerfile for GoCD server running on ${distro.name()} v${distroVersion.version}"
    task.group = BasePlugin.BUILD_GROUP

    task.distro = distro
    task.distroVersion = distroVersion
    task.tiniVersion = project.versions.tini
    task.imageType = ImageType.server
    task.outputDir = project.file("${project.parent.buildDir}/docker")

    task.templateHelper = {
      project.delete(project.fileTree(task.gitRepoDirectory).include("*"))

      project.copy {
        from rootProject.file("LICENSE")
        into task.gitRepoDirectory
      }

      task.writeTemplateToFile("README.md.ftl", project.file("${task.gitRepoDirectory}/README.md"))

      [
        'logback-include.xml',
      ].forEach { eachFile ->
        project.file("${task.gitRepoDirectory}/${eachFile}").bytes = BuildDockerImageTask.class.getResource("/gocd-docker-server/${eachFile}").bytes
      }

      [
        'install-gocd-plugins',
        'git-clone-config',
        'docker-entrypoint.sh'
      ].forEach { eachFile ->
        def file = project.file("${task.gitRepoDirectory}/${eachFile}")

        file.bytes = BuildDockerImageTask.class.getResource("/gocd-docker-server/${eachFile}").bytes
        file.setExecutable(true, false)
      }
    }

    // test image
    task.verifyHelper = { boolean isNative ->
      def cleanContainer = {     // remove the container
        project.exec {
          workingDir = project.rootProject.projectDir
          commandLine = ["docker", "rm", "--force", docker.dockerImageName]
          standardOutput = System.out
          errorOutput = System.err
        }
      }

      // daemonize the container
      cleanContainer.call() // Clean-up after any previous aborted runs
      project.exec {
        workingDir = project.rootProject.projectDir
        commandLine = ["docker", "run", "-d", "--name", docker.dockerImageName, docker.imageNameWithTag]
        standardOutput = System.out
        errorOutput = System.err
      }

      // Need to wait for start. Would be better to have some polling mechanism here with a timeout.
      def sleep = isNative ? 10000 : 15000
      logger.lifecycle("\nWaiting ${sleep}ms for ${isNative ? 'native' : 'emulated'} container to start...")
      Thread.sleep(sleep)
      logger.lifecycle("Should be started now...")

      // run a `ps aux`
      ByteArrayOutputStream psOutput = new ByteArrayOutputStream()
      project.exec {
        workingDir = project.rootProject.projectDir
        commandLine = ["docker", "exec", docker.dockerImageName, "ps", "aux"]
        standardOutput = new TeeOutputStream(psOutput, System.out)
        errorOutput = new TeeOutputStream(psOutput, System.err)
        ignoreExitValue = true
      }

      ByteArrayOutputStream containerOutput = new ByteArrayOutputStream()
      project.exec {
        workingDir = project.rootProject.projectDir
        commandLine = ["docker", "logs", docker.dockerImageName]
        standardOutput = containerOutput
        errorOutput = containerOutput
        ignoreExitValue = true
      }

      // remove the container
      cleanContainer.call()

      // assert if process was running
      def expectedProcess = "lib/go.jar"
      def processList = psOutput.toString()
      if (!processList.contains(expectedProcess)) {
        throw new GradleException("Expected process output to contain ${expectedProcess}, but was: [${processList}]\n\nContainer output:\n${containerOutput.toString()}")
      }
    }
  }
}

task generateManifest() {
  doLast {
    def meta = []
    subprojects.tasks*.getByName('docker').forEach { BuildDockerImageTask dockerTask ->
      meta << [
        file     : "${dockerTask.imageTarFile.name}",
        format   : 'oci',
        imageName: dockerTask.dockerImageName,
        tag      : dockerTask.imageTag,
        platforms: dockerTask.supportedPlatforms
      ]
    }

    def jsonFile = project.file("${project.buildDir}/docker/manifest.json")
    project.mkdir(jsonFile.parentFile)
    jsonFile.withWriter("utf-8") { Writer out ->
      out << JsonOutput.toJson(meta)
    }
  }
}

assemble.dependsOn(subprojects.tasks*.getByName('assemble'))
assemble.dependsOn(generateManifest)
