/*
 * Copyright 2024 Thoughtworks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

description = 'GoCD Base'

dependencies {
  compileOnly project.deps.bouncyCastle
  compileOnly project.deps.bouncyCastlePkix

  api project.deps.commonsIO
  api project.deps.commonsLang3
  api(project.deps.apacheHttpComponents) {
    exclude(module: 'commons-codec')
    exclude(module: 'commons-logging')
  }
  api project.deps.jodaTime
  api project.deps.slf4jJcl
  compileOnly project.deps.logback
  testImplementation project.deps.logback

  compileOnly project.deps.jetBrainsAnnotations

  testRuntimeOnly project.deps.bouncyCastle
  testRuntimeOnly project.deps.bouncyCastlePkix
  testImplementation project(path: ':test:test-utils', configuration: 'runtimeElements')
  testImplementation project.deps.junit5Api
  testRuntimeOnly project.deps.junit5Engine
  testImplementation project.deps.systemStubs
  testImplementation project.deps.hamcrest
  testImplementation project.deps.mockitoCore
  testImplementation project.deps.assertJ
}

def generatedResourcesOutput = file("resources-generated")
def generatedResourcesInput = file('resource-templates')

sourceSets {
  main {
    resources {
      output.dir generatedResourcesOutput, builtBy: 'generateResources'
      srcDirs += generatedResourcesOutput
    }
  }
}

clean {
  delete(generatedResourcesOutput)
}

task generateResources {
  inputs.dir(generatedResourcesInput)
  outputs.dir(generatedResourcesOutput)

  def props = [
    'goVersion'    : rootProject.goVersion,
    'distVersion'  : rootProject.distVersion,
    'fullVersion'  : rootProject.fullVersion,
    'gitRevision'  : rootProject.gitRevision,
    'copyrightYear': rootProject.copyrightYear,
  ]

  inputs.properties(props)

  doFirst {
    project.delete(generatedResourcesOutput)
    generatedResourcesOutput.mkdirs()

    project.copy {
      into generatedResourcesOutput
      from(generatedResourcesInput) {
        expand(props)
      }
    }
  }
}

processResources {
  dependsOn generateResources
}

task prepare {
  dependsOn generateResources
}
