<?xml version="1.0" encoding="utf-8"?>
<!-- *
 * Copyright 2022 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * -->

<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="14">
  <server artifactsdir="logs">
    <license user="Someone Somewhere">FJFJDJJJKDSJSKSKJSJ</license>
    <security>
      <roles>
        <role name="beta">
          <user>abc</user>
          <user>def</user>
          <user>ghi</user>
        </role>
        <role name="atf">
          <user>jkl</user>
          <user>mno</user>
          <user>pqr</user>

          <user>stu</user>
          <user>vwx</user>
          <user>yza</user>
          <user>bcd</user>
          <user>efg</user>
        </role>

      </roles>
      <admins>
          <user>stu</user>
          <user>vwx</user>
          <user>yza</user>
          <user>bcd</user>
          <user>efg</user>
      </admins>
    </security>
    <mailhost hostname="somewhere.someone.lan" port="25" tls="false" from="cruise-no-reply@someone.com" admin="build@someone.com" />
  </server>
  <pipelines group="Asterisk">
    <pipeline name="Asterisk-tools">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/asterisk/trunk/tools/" username="java-builder" password="*******" dest="source" />

      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-asterisk-log-monitor" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-asterisk-tools" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />

            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>

        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Asterisk-etc">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/asterisk/trunk/configs/" username="java-builder" password="*******" dest="configs" />
      </materials>
      <stage name="BuildRPMs">

        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="configs" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-asterisk-astbeta" workingdir="configs" />
              <exec command="/home/builder/tools/specs/build.sh" args=" build sv-asterisk-aststage" workingdir="configs" />
              <exec command="/home/builder/tools/specs/build.sh" args=" build sv-asterisk-ast01" workingdir="configs" />
              <exec command="/home/builder/tools/specs/build.sh" args=" build sv-asterisk-ast02" workingdir="configs" />
              <exec command="/home/builder/tools/specs/build.sh" args=" build sv-asterisk-ast03" workingdir="configs" />

              <exec command="/home/builder/tools/specs/build.sh" args=" createdevrepo" workingdir="configs" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="configs/target/rpm" />
            </artifacts>

          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>

        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="Asterisk-etc" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="configs" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="configs" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="configs/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="Asterisk">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/asterisk/trunk/source" username="java-builder" password="*******" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">

            <tasks>
              <exec command="bash" args="tools/specs/build.sh clean" />
              <exec command="bash" args="tools/specs/build.sh build sv-asterisk" />
              <exec command="bash" args="tools/specs/build.sh createdevrepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Automation">

    <pipeline name="Lattice-Stage-Tests">
      <materials>
        <svn url="https://svn.someone.lan/svn/ASG/trunk/release-tests" username="java-builder" password="*******" />
      </materials>
      <stage name="defaultStage">
        <approval type="manual" />
        <jobs>
          <job name="defaultJob">
            <tasks>

              <ant buildfile="build.xml" />
            </tasks>
            <resources>
              <resource>ASG</resource>
            </resources>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="HUD">
      <materials>
        <svn url="https://svn.someone.lan/svn/ASG/trunk/hud" username="java-builder" password="*******" />
      </materials>
      <stage name="testStage">
        <jobs>
          <job name="test">
            <tasks>

              <exec command="testing/test.sh" args="etc/es-MX.conf training/Results/complete/es-MX-2blScore/Data" />
              <exec command="testing/test.sh" args="etc/es-CO.conf training/Results/complete/es-CO-2blScore/Data" />
            </tasks>
            <resources>
              <resource>asr_test</resource>
            </resources>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="Lattice-Live-Tests">
      <materials>
        <svn url="https://svn.someone.lan/svn/ASG/trunk/release-tests" username="java-builder" password="*******" dest="release-tests" />
      </materials>
      <stage name="RunTests">
        <approval type="manual" />
        <jobs>

          <job name="RunTests">
            <tasks>
              <ant buildfile="build.xml" target="-DBLADE=nehalem -DLANGUAGE=all start" workingdir="release-tests" />
              <ant buildfile="build.xml" target="versions" workingdir="release-tests" />
              <ant buildfile="build.xml" target="submit.all" workingdir="release-tests" />
              <ant buildfile="build.xml" target="dequeue" workingdir="release-tests" />
              <ant buildfile="build.xml" target="audit" workingdir="release-tests" />
              <ant buildfile="build.xml" target="stop.services" workingdir="release-tests">
                <runif status="any" />

              </ant>
            </tasks>
            <resources>
              <resource>ASG</resource>
            </resources>
            <artifacts>
              <artifact src="release-tests/pipeline.versions" dest="versions" />
              <artifact src="release-tests/manager.versions" dest="versions" />

              <artifact src="release-tests/messages.xml" dest="messages" />
              <artifact src="release-tests/summary.txt" dest="messages" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Lattice-Generator">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />

      <materials>
        <svn url="https://svn.someone.lan/svn/ASG/trunk/lattice_generator" username="java-builder" password="*******" dest="generator" />
        <svn url="https://svn.someone.lan/svn/ASG/trunk/externallibs" username="java-builder" password="*******" dest="externallibs" />
        <svn url="https://svn.someone.lan/svn/ASG/trunk/src" username="java-builder" password="*******" dest="src" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="Build">
            <tasks>

              <exec command="/usr/bin/make" args="clean" workingdir="generator" />
              <exec command="/usr/bin/make" args="PRECOMPILED_EXTERNAL=TRUE" workingdir="generator" />
            </tasks>
            <resources>
              <resource>ASG</resource>
            </resources>
            <artifacts>
              <artifact src="generator/lattice_generator" dest="bin" />

              <artifact src="generator/hugepagesconfig.sh" dest="bin" />
              <artifact src="generator/sv_release.txt" dest="bin" />
              <artifact src="generator/.svn" dest="bin" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="unitTests">
        <jobs>

          <job name="Test">
            <tasks>
              <exec command="/usr/bin/make" args="test PRECOMPILED_EXTERNAL=TRUE" workingdir="generator" />
            </tasks>
            <resources>
              <resource>ASG</resource>
            </resources>
            <artifacts>

              <artifact src="generator/tester" dest="bin" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Lattice-Generator-Branch">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>

        <svn url="https://svn.someone.lan/svn/ASG/tags/v2_52/lattice_generator" username="java-builder" password="*******" dest="generator" />
        <svn url="https://svn.someone.lan/svn/ASG/tags/v2_52/externallibs" username="java-builder" password="*******" dest="externallibs" />
        <svn url="https://svn.someone.lan/svn/ASG/tags/v2_52/src" username="java-builder" password="*******" dest="src" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="Build">
            <tasks>
              <exec command="/usr/bin/make" args="clean" workingdir="generator" />

              <exec command="/usr/bin/make" args="PRECOMPILED_EXTERNAL=TRUE" workingdir="generator" />
            </tasks>
            <resources>
              <resource>ASG</resource>
            </resources>
            <artifacts>
              <artifact src="generator/lattice_generator" dest="bin" />
              <artifact src="generator/hugepagesconfig.sh" dest="bin" />

              <artifact src="generator/sv_release.txt" dest="bin" />
              <artifact src="generator/.svn" dest="bin" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="unitTests">
        <jobs>
          <job name="Test">

            <tasks>
              <exec command="/usr/bin/make" args="test PRECOMPILED_EXTERNAL=TRUE" workingdir="generator" />
            </tasks>
            <resources>
              <resource>ASG</resource>
            </resources>
            <artifacts>
              <artifact src="generator/tester" dest="bin" />

            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Lattice-Processor">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.automation/trunk/automation-lattice-processor" username="java-builder" password="*******" dest="source/lattice-processor" />

        <svn url="https://svn.someone.lan/svn/ASG/trunk/externallibs" username="java-builder" password="*******" dest="externallibs" />
      </materials>
      <stage name="CompileLatticeProcessor-Debug">
        <jobs>
          <job name="Build">
            <tasks>
              <exec command="/usr/bin/make" args="clean" workingdir="source/lattice-processor/Debug" />
            </tasks>
            <resources>

              <resource>gcc</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RegressionTests">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />

      <materials>
        <svn url="https://svn.someone.lan/svn/ASG/trunk/regression-tests" username="java-builder" password="*******" dest="regression-tests" />
      </materials>
      <stage name="DeployAndRun">
        <approval type="manual" />
        <jobs>
          <job name="DeployAndRunTests">
            <tasks>
              <ant target="deploy.and.test" workingdir="regression-tests" />

            </tasks>
            <resources>
              <resource>ASG</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>

  </pipelines>
  <pipelines group="Automation-Adapter">
    <pipeline name="Automation-Adapter">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.grid/trunk/automation-adapter" username="java-builder" password="*******">
          <filter>
            <ignore pattern="etc/dc-specific/**/*.*" />
          </filter>

        </svn>
      </materials>
      <stage name="CompileUnitTest">
        <jobs>
          <job name="BuildAndTest">
            <tasks>
              <exec command="/opt/common/maven/bin/mvn" args="clean install surefire-report:report" />
            </tasks>
            <tabs>

              <tab name="test-report" path="site/surefire-report.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <test src="target/site" />
              <artifact src="target/automation-adapter-1.1-SNAPSHOT-jar-with-dependencies.jar" />

              <artifact src="tools/automation-adapter" />
              <artifact src="tools/automation-adapter.sh" />
              <artifact src="tools/sv_release.txt" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="FunctionalTest">
        <jobs>

          <job name="FunctionalTest">
            <tasks>
              <exec command="/opt/common/maven/bin/mvn" args="-Pfunctional-test clean test surefire-report:report" />
            </tasks>
            <tabs>
              <tab name="functional-test" path="target/site/surefire-report.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
            <artifacts>
              <test src="target/site" dest="functional-test" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="BuildRPM">
        <jobs>

          <job name="Build_sv-java-automationAdapter">
            <tasks>
              <fetchartifact pipeline="Automation-Adapter" stage="CompileUnitTest" job="BuildAndTest" srcfile="automation-adapter-1.1-SNAPSHOT-jar-with-dependencies.jar" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-automation-adapter-etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-automation-adapter" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">

            <tasks>
              <fetchartifact pipeline="Automation-Adapter" stage="BuildRPM" job="Build_sv-java-automationAdapter" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Automation-Adapter-1.0-BugFix">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />

      <materials>
        <svn url="https://svn.someone.lan/svn/someone.grid/branches/Windscale_1.0_bugfix" username="java-builder" password="*******">
          <filter>
            <ignore pattern="etc/dc-specific/**/*.*" />
          </filter>
        </svn>
      </materials>
      <stage name="CompileUnitTest">
        <jobs>

          <job name="BuildAndTest">
            <tasks>
              <ant target="-Denvironment=build-server lib.clean-cache" />
              <ant target="-Denvironment=build-server create.artifacts" />
            </tasks>
            <tabs>
              <tab name="UnitTests" path="unit-test-report/output/index.html" />
            </tabs>
            <resources>

              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/artifacts/automation-adapter.jar" />
              <artifact src="target/test/reports/output" dest="unit-test-report" />
              <artifact src="target/artifacts/automation-adapter-etc-dev.zip" />
              <artifact src="tools/automation-adapter" />
              <artifact src="tools/automation-adapter.sh" />

              <artifact src="tools/sv_release.txt" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="FunctionalTest">
        <jobs>
          <job name="FunctionalTest">
            <tasks>

              <ant target="-Denvironment=build-server functional-test" />
            </tasks>
            <tabs>
              <tab name="functional-test" path="target/functionaltest/reports/output/index.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>

            <artifacts>
              <artifact src="target/functionaltest/reports" dest="target/functionaltest/" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="BuildRPM">
        <jobs>
          <job name="Build_sv-java-automationAdapter">

            <tasks>
              <fetchartifact pipeline="Automation-Adapter-1.0-BugFix" stage="CompileUnitTest" job="BuildAndTest" srcfile="automation-adapter.jar" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-automation-adapter-etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-automation-adapter" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">

          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="Automation-Adapter-1.0-BugFix" stage="BuildRPM" job="Build_sv-java-automationAdapter" srcdir="rpm" />

              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />

            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Automation-Adapter-1.0-DepFix">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.grid/branches/B_35173" username="java-builder" password="*******">

          <filter>
            <ignore pattern="etc/dc-specific/**/*.*" />
          </filter>
        </svn>
      </materials>
      <stage name="CompileUnitTest">
        <jobs>
          <job name="BuildAndTest">
            <tasks>

              <ant target="-Denvironment=build-server lib.clean-cache" />
              <ant target="-Denvironment=build-server create.artifacts" />
            </tasks>
            <tabs>
              <tab name="UnitTests" path="unit-test-report/output/index.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
            <artifacts>
              <artifact src="target/artifacts/automation-adapter.jar" />
              <artifact src="target/test/reports/output" dest="unit-test-report" />
              <artifact src="target/artifacts/automation-adapter-etc-dev.zip" />
              <artifact src="tools/automation-adapter" />
              <artifact src="tools/automation-adapter.sh" />
              <artifact src="tools/sv_release.txt" />
            </artifacts>

          </job>
        </jobs>
      </stage>
      <stage name="FunctionalTest">
        <jobs>
          <job name="FunctionalTest">
            <tasks>
              <ant target="-Denvironment=build-server functional-test" />
            </tasks>

            <tabs>
              <tab name="functional-test" path="target/functionaltest/reports/output/index.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/functionaltest/reports" dest="target/functionaltest/" />

            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="BuildRPM">
        <jobs>
          <job name="Build_sv-java-automationAdapter">
            <tasks>
              <fetchartifact pipeline="Automation-Adapter-1.0-DepFix" stage="CompileUnitTest" job="BuildAndTest" srcfile="automation-adapter.jar" />

              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-automation-adapter-etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-automation-adapter" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>

            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="Automation-Adapter-1.0-DepFix" stage="BuildRPM" job="Build_sv-java-automationAdapter" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />

              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Automation-Adapter-Performance-Test">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.grid/trunk/automation-adapter-performance-test" username="java-builder" password="*******" />
        <pipeline pipelineName="Automation-Adapter" stageName="CompileUnitTest" />

      </materials>
      <stage name="PerformanceTest">
        <jobs>
          <job name="BuildAndTest">
            <tasks>
              <ant target="-Denvironment=build-server deploy.and.run.performance.tests" />
            </tasks>
            <tabs>
              <tab name="PerfTest" path="performance-test-report/jmeter-output/automation-adapter-service-sanity-index.html" />

            </tabs>
            <resources>
              <resource>performance</resource>
            </resources>
            <artifacts>
              <test src="target/jmeter-output" dest="performance-test-report" />
            </artifacts>
          </job>

        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Automation-Adapter-UI">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.grid/trunk/automation-adapter-war" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileUnitTest">

        <jobs>
          <job name="BuildAndTest">
            <tasks>
              <ant target="-Denvironment=build-server clean create.war" />
            </tasks>
            <tabs>
              <tab name="UnitTests" path="unit-test-report/output/index.html" />
            </tabs>
            <resources>

              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/automation-adapter.war" />
              <artifact src="tools/sv_release.txt" />
            </artifacts>
          </job>
        </jobs>

      </stage>
      <stage name="BuildRPM">
        <jobs>
          <job name="Build_sv-java-automationAdapter-ui">
            <tasks>
              <fetchartifact pipeline="Automation-Adapter-UI" stage="CompileUnitTest" job="BuildAndTest" srcfile="automation-adapter.war" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-automation-adapter-ui" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />

            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>

        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>

        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="Automation-Adapter-UI" stage="BuildRPM" job="Build_sv-java-automationAdapter-ui" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>

  <pipelines group="Common">
    <pipeline name="common-config">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-config/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">

            <tasks>
              <exec command="mvn" args="-U -npu clean surefire-report:report package" />
            </tasks>
            <tabs>
              <tab name="UnitTestReports" path="site/surefire-report.html" />
            </tabs>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <test src="target/surefire-reports" />
              <artifact src="target/site" />
              <artifact src="target/*.jar" dest="pkg" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="DeployToArtifactory">
        <jobs>
          <job name="Deploy">
            <tasks>
              <exec command="mvn" args="deploy" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <artifact src="target/*.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-core">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-core/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U clean package deploy" />

            </tasks>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>

    <pipeline name="common-core-test">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-core-test/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>

              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="common-automation">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-automation/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">

            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="common-entities">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-entities/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>

          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
          </job>

        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-entities-test">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-entities-test/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileAndUnitTest">

        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-phonenumbers">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-phonenumbers/trunk" username="java-builder" password="*******" />
      </materials>

      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-postprocessing">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-postprocessing/trunk" username="java-builder" password="*******" />

      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-logging">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-logging/trunk" username="java-builder" password="*******" />

      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-logging-test">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-logging-test/trunk" username="java-builder" password="*******" />

        <pipeline pipelineName="common-logging" stageName="CompileAndUnitTest" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U clean package surefire-report:report deploy" />
            </tasks>
            <tabs>

              <tab name="UnitTestReports" path="site/surefire-report.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="common-alerting">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-alerting/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">

            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="common-alerting-test">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-alerting-test/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>

          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
          </job>

        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-health">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-health/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileAndUnitTest">

        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-http">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-http/trunk" username="java-builder" password="*******" />
      </materials>

      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-http-test">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-http-test/trunk" username="java-builder" password="*******" />

      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-storagemanagerservice">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-storagemanagerservice/trunk" username="java-builder" password="*******" />

      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-storagemanager-test">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-storagemanager-test/trunk" username="java-builder" password="*******" />

      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-stats">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-stats/trunk" username="java-builder" password="*******" />

      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U -npu clean surefire-report:report package" />
            </tasks>
            <tabs>
              <tab name="UnitTestReports" path="site/surefire-report.html" />

            </tabs>
            <resources>
              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <test src="target/surefire-reports" />
              <artifact src="target/site" />
              <artifact src="target/*.jar" dest="pkg" />

            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToArtifactory">
        <jobs>
          <job name="Deploy">
            <tasks>
              <exec command="mvn" args="deploy" />

            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <artifact src="target/*.jar" />
            </artifacts>
          </job>

        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-grid-adapter-ws-client">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-grid-adapter-ws-client/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileAndUnitTest">

        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-all">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-all/trunk" username="java-builder" password="*******" />
      </materials>

      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-all-test">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/common-all-test/trunk" username="java-builder" password="*******" />

      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Edmund">
    <pipeline name="edmund-parent">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />

      <materials>
        <svn url="https://svn.someone.lan/svn/edmund/trunk/edmund-parent" username="java-builder" password="*******" />
      </materials>
      <stage name="Update">
        <jobs>
          <job name="Update">
            <tasks>
              <exec command="mvn" args="-U clean package deploy" />
            </tasks>

            <resources>
              <resource>cruise_java_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="edmund_core">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/edmund/trunk/edmund" username="java-builder" password="*******" />
        <pipeline pipelineName="edmund-msf-client" stageName="DeployToArtifactory" />
        <pipeline pipelineName="edmund-tenzing-api" stageName="DeployToArtifactory" />
        <pipeline pipelineName="edmund-parent" stageName="Update" />
        <pipeline pipelineName="someMessages-EJB" stageName="package" />
        <pipeline pipelineName="datawarehouse-eventlogger-client" stageName="DeployToArtifactory" />
        <pipeline pipelineName="datawarehouse-eventlogger-test" stageName="DeployToArtifactory" />

        <pipeline pipelineName="common-stats" stageName="DeployToArtifactory" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-Denvironment=build-server -U clean surefire-report:report package" />
            </tasks>
            <tabs>

              <tab name="UnitTestReports" path="site/surefire-report.html" />
            </tabs>
            <resources>
              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <test src="target/surefire-reports" />
              <artifact src="target/site" />

              <artifact src="target" dest="pkg" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="RunFunctionalTests">
        <jobs>
          <job name="FunctionalTest">
            <tasks>

              <exec command="mvn" args="-U dependency:resolve" />
              <ant buildfile="ant-functional-test.xml" />
            </tasks>
            <tabs>
              <tab name="Reports" path="reports/www/index.html" />
            </tabs>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <test src="functional-tests-target/reports" />
              <artifact src="functional-tests-target/reports/www/" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToArtifactory">

        <jobs>
          <job name="Deploy">
            <tasks>
              <fetchartifact pipeline="edmund_core" stage="CompileAndUnitTest" job="CompileAndUnitTest" srcdir="pkg/target" dest="target" />
              <exec command="mvn" args="'-DMVN_OPTS=-XX:MaxPermSize=256m -Xmx1024m -Xms512m -DskipTests' deploy" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <artifact src="target/*.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="BuildRPM">
        <jobs>

          <job name="BuildRPM">
            <tasks>
              <fetchartifact pipeline="edmund_core" stage="CompileAndUnitTest" job="CompileAndUnitTest" srcfile="pkg/target/edmund-0.0.1-SNAPSHOT-jar-with-dependencies.jar" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-edmund-etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-edmund" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="edmund-tenzing-api">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/edmund/trunk/edmund-tenzing-api" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">

            <tasks>
              <exec command="mvn" args="-U clean surefire-report:report package" />
            </tasks>
            <tabs>
              <tab name="UnitTestReports" path="site/surefire-report.html" />
            </tabs>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <test src="target/surefire-reports" />
              <artifact src="target/site" />
              <artifact src="target/*.jar" dest="pkg" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="DeployToArtifactory">
        <jobs>
          <job name="Deploy">
            <tasks>
              <fetchartifact pipeline="edmund-tenzing-api" stage="CompileAndUnitTest" job="CompileAndUnitTest" srcdir="pkg" dest="target" />
              <exec command="mvn" args="deploy" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <artifact src="target/*.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="edmund-msf-client">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/edmund/trunk/edmund-msf-client" username="java-builder" password="*******" />
        <pipeline pipelineName="edmund-test-utils" stageName="DeployToArtifactory" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>

              <exec command="mvn" args="-U clean surefire-report:report package" />
            </tasks>
            <tabs>
              <tab name="UnitTestReports" path="site/surefire-report.html" />
            </tabs>
            <resources>
              <resource>working_mvn</resource>
            </resources>

            <artifacts>
              <test src="target/surefire-reports" />
              <artifact src="target/site" />
              <artifact src="target/*.jar" dest="pkg" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="RunFunctionalTests">

        <jobs>
          <job name="FunctionalTest">
            <tasks>
              <ant buildfile="ant-functional-test.xml" />
            </tasks>
            <tabs>
              <tab name="Reports" path="reports/www/index.html" />
            </tabs>
            <resources>

              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <test src="functional-tests-target/reports" />
              <artifact src="functional-tests-target/reports/www/" />
            </artifacts>
          </job>
        </jobs>

      </stage>
      <stage name="DeployToArtifactory">
        <jobs>
          <job name="Deploy">
            <tasks>
              <fetchartifact pipeline="edmund-msf-client" stage="CompileAndUnitTest" job="CompileAndUnitTest" srcdir="pkg" dest="target" />
              <exec command="mvn" args="deploy" />
            </tasks>
            <resources>

              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <artifact src="target/*.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="edmund-test-utils">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/edmund/trunk/edmund-test" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">

            <tasks>
              <exec command="mvn" args="-U clean surefire-report:report package" />
            </tasks>
            <tabs>
              <tab name="UnitTestReports" path="site/surefire-report.html" />
            </tabs>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <test src="target/surefire-reports" />
              <artifact src="target/site" />
              <artifact src="target/" dest="pkg" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="DeployToArtifactory">
        <jobs>
          <job name="Deploy">
            <tasks>
              <fetchartifact pipeline="edmund-test-utils" stage="CompileAndUnitTest" job="CompileAndUnitTest" srcdir="pkg" dest="target" />
              <exec command="mvn" args="deploy" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <artifact src="target/*.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="edmund-tenzingendpoint-stub">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/edmund/trunk/edmund-tenzingendpoint-stub" username="java-builder" password="*******" />
        <pipeline pipelineName="edmund-tenzing-api" stageName="DeployToArtifactory" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>

              <exec command="mvn" args="-U clean surefire-report:report package" />
            </tasks>
            <tabs>
              <tab name="UnitTestReports" path="site/surefire-report.html" />
            </tabs>
            <resources>
              <resource>working_mvn</resource>
            </resources>

            <artifacts>
              <test src="target/surefire-reports" />
              <artifact src="target/site" />
              <artifact src="target/*.jar" dest="pkg" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="RunFunctionalTests">

        <jobs>
          <job name="FunctionalTest">
            <tasks>
              <ant buildfile="ant-functional-test.xml" />
            </tasks>
            <tabs>
              <tab name="Reports" path="functional-test-reports/www/index.html" />
            </tabs>
            <resources>

              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <test src="target/functional-test-reports" />
              <artifact src="target/functional-test-reports/www/" />
            </artifacts>
          </job>
        </jobs>

      </stage>
      <stage name="DeployToArtifactory">
        <jobs>
          <job name="Deploy">
            <tasks>
              <fetchartifact pipeline="edmund-tenzingendpoint-stub" stage="CompileAndUnitTest" job="CompileAndUnitTest" srcdir="pkg" dest="target" />
              <exec command="mvn" args="deploy" />
            </tasks>
            <resources>

              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <artifact src="target/*.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="datawarehouse-eventlogger-common">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/edmund/trunk/datawarehouse-eventlogger-common" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">

            <tasks>
              <exec command="mvn" args="-U -npu clean surefire-report:report package" />
            </tasks>
            <tabs>
              <tab name="UnitTestReports" path="site/surefire-report.html" />
            </tabs>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <test src="target/surefire-reports" />
              <artifact src="target/site" />
              <artifact src="target/*.jar" dest="pkg" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="DeployToArtifactory">
        <jobs>
          <job name="Deploy">
            <tasks>
              <fetchartifact pipeline="datawarehouse-eventlogger-common" stage="CompileAndUnitTest" job="CompileAndUnitTest" srcdir="pkg" dest="target" />
              <exec command="mvn" args="deploy" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <artifact src="target/*.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="datawarehouse-eventlogger-test">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/edmund/trunk/datawarehouse-eventlogger-test" username="java-builder" password="*******" />
        <pipeline pipelineName="datawarehouse-eventlogger-client" stageName="DeployToArtifactory" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>

              <exec command="mvn" args="-U -npu clean surefire-report:report package" />
            </tasks>
            <tabs>
              <tab name="UnitTestReports" path="site/surefire-report.html" />
            </tabs>
            <resources>
              <resource>working_mvn</resource>
            </resources>

            <artifacts>
              <test src="target/surefire-reports" />
              <artifact src="target/site" />
              <artifact src="target/*.jar" dest="pkg" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToArtifactory">

        <jobs>
          <job name="Deploy">
            <tasks>
              <fetchartifact pipeline="datawarehouse-eventlogger-test" stage="CompileAndUnitTest" job="CompileAndUnitTest" srcdir="pkg" dest="target" />
              <exec command="mvn" args="deploy" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <artifact src="target/*.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="datawarehouse-eventlogger-client">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/edmund/trunk/datawarehouse-eventlogger-client" username="java-builder" password="*******" />
        <pipeline pipelineName="datawarehouse-eventlogger-common" stageName="DeployToArtifactory" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>

              <exec command="mvn" args="-U -npu clean surefire-report:report package" />
            </tasks>
            <tabs>
              <tab name="UnitTestReports" path="site/surefire-report.html" />
            </tabs>
            <resources>
              <resource>working_mvn</resource>
            </resources>

            <artifacts>
              <test src="target/surefire-reports" />
              <artifact src="target/site" />
              <artifact src="target/*.jar" dest="pkg" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToArtifactory">

        <jobs>
          <job name="Deploy">
            <tasks>
              <fetchartifact pipeline="datawarehouse-eventlogger-client" stage="CompileAndUnitTest" job="CompileAndUnitTest" srcdir="pkg" dest="target" />
              <exec command="mvn" args="deploy" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <artifact src="target/*.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="datawarehouse-eventlogger-server">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/edmund/trunk/datawarehouse-eventlogger-server" username="java-builder" password="*******" />
        <pipeline pipelineName="edmund-test-utils" stageName="DeployToArtifactory" />
        <pipeline pipelineName="datawarehouse-eventlogger-common" stageName="DeployToArtifactory" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">

            <tasks>
              <exec command="mvn" args="-U -npu clean surefire-report:report package" />
            </tasks>
            <tabs>
              <tab name="UnitTestReports" path="site/surefire-report.html" />
            </tabs>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <test src="target/surefire-reports" />
              <artifact src="target/site" />
              <artifact src="target/*.jar" dest="pkg" />
              <artifact src="tools" />
              <artifact src=".svn" />
            </artifacts>
          </job>

        </jobs>
      </stage>
      <stage name="RunFunctionalTests">
        <jobs>
          <job name="FunctionalTest">
            <tasks>
              <exec command="mvn" args="-U validate" />
              <ant buildfile="ant-functional-test.xml" />
            </tasks>

            <tabs>
              <tab name="Reports" path="functional-test-reports/www/index.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <test src="target/functional-test-reports" />

              <artifact src="target/functional-test-reports/www/" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToArtifactory">
        <jobs>
          <job name="Deploy">
            <tasks>

              <fetchartifact pipeline="datawarehouse-eventlogger-server" stage="CompileAndUnitTest" job="CompileAndUnitTest" srcdir="pkg" dest="target" />
              <exec command="mvn" args="deploy" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <artifact src="target/*.jar" />

            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="BuildRPM">
        <jobs>
          <job name="BuildRPM">
            <tasks>
              <fetchartifact pipeline="datawarehouse-eventlogger-server" stage="CompileAndUnitTest" job="CompileAndUnitTest" srcfile="pkg/datawarehouse-eventlogger-server-0.0.1-SNAPSHOT-jar-with-dependencies.jar" />

              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-datawarehouse-eventlogger-etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-datawarehouse-eventlogger" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="GRID-Integration">

    <pipeline name="Database-someMessages-Grid">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/someone.databases/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="RestoreCruiseAndUpgrade">
        <jobs>
          <job name="RestoreCruiseAndUpgrade">
            <tasks>

              <ant buildfile="build.xml" target="-verbose fresh-rebuild-db -Ddb_suffix=cruise" />
            </tasks>
            <resources>
              <resource>dbrestore</resource>
            </resources>
            <artifacts>
              <artifact src="target" />
            </artifacts>

          </job>
        </jobs>
      </stage>
      <stage name="RestoreSmokeTestDbAndUpgrade">
        <jobs>
          <job name="dmardb01-somemessages_smoke">
            <tasks>
              <fetchartifact pipeline="Database-someMessages-Grid" stage="RestoreCruiseAndUpgrade" job="RestoreCruiseAndUpgrade" srcdir="target/informix_db_changes" dest="cvs/data" />
              <fetchartifact pipeline="Database-someMessages-Grid" stage="RestoreCruiseAndUpgrade" job="RestoreCruiseAndUpgrade" srcdir="target/stored_procedures" dest="cvs/data" />

              <ant buildfile="build.xml" target="-verbose fresh-rebuild-db -Ddb_suffix=smoke" />
            </tasks>
            <resources>
              <resource>dbrestore</resource>
            </resources>
            <artifacts>
              <artifact src="target" />
            </artifacts>

          </job>
        </jobs>
      </stage>
      <stage name="DestroyAndRebuildQaDatabase">
        <approval type="manual" />
        <jobs>
          <job name="dmardb01-somemessages_qa">
            <tasks>
              <fetchartifact pipeline="Database-someMessages-Grid" stage="RestoreCruiseAndUpgrade" job="RestoreCruiseAndUpgrade" srcdir="target/informix_db_changes" dest="cvs/data" />

              <fetchartifact pipeline="Database-someMessages-Grid" stage="RestoreCruiseAndUpgrade" job="RestoreCruiseAndUpgrade" srcdir="target/stored_procedures" dest="cvs/data" />
              <ant buildfile="build.xml" target="-verbose rebuild-db -Ddb_suffix=qa" />
            </tasks>
            <resources>
              <resource>dbrestore</resource>
            </resources>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="someMessages-Grid">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.somemessages/trunk" username="java-builder" password="*******" dest="someone.somemessages" />
      </materials>
      <stage name="Compile">
        <jobs>

          <job name="CompileOnWindows">
            <tasks>
              <ant buildfile="build.xml" target="tag.and.checkout" workingdir="someone.somemessages" />
              <ant buildfile="build.xml" target="generate.release.file" workingdir="someone.somemessages" />
              <exec command="c:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\msbuild.exe" args="messages.build /target:CruiseBuild" workingdir="cvs/someone.Messages/Messages" />
            </tasks>
            <resources>
              <resource>Windows</resource>

              <resource>.net</resource>
            </resources>
            <artifacts>
              <artifact src="cvs/someone.Messages/bin" dest="someMessages" />
              <artifact src="cvs/someone.Messages/PrecompiledWeb/Messages/WebServices" dest="someMessages" />
              <artifact src="cvs/someone.Messages/Messages/etc" dest="etc" />
              <artifact src="someone.somemessages" dest="svn" />
            </artifacts>

          </job>
        </jobs>
      </stage>
      <stage name="UnitTest">
        <jobs>
          <job name="UnitTest">
            <tasks>
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="someMessages/WebServices" dest="cascade" />
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="etc" dest="cascade" />

              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="someMessages/bin" dest="cascade" />
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcfile="svn/someone.somemessages/target/sv_release.txt" dest="cascade" />
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="someMessages" dest="working" />
              <exec command="nunit-console2" args="Tests.someone.Messages.Grid.dll -nologo -xml=Tests.someone.Messages.Grid.nUnit.xml /include:AllUnit" workingdir="working/someMessages/bin/Tests" />
            </tasks>
            <resources>
              <resource>Windows</resource>
            </resources>

            <artifacts>
              <artifact src="cascade/WebServices" />
              <artifact src="cascade/etc" />
              <artifact src="cascade/bin" />
              <artifact src="cascade/sv_release.txt" />
              <test src="working/someMessages/bin/Tests" />
            </artifacts>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="someMessages-Grid-WiredTests">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="Database-someMessages-Grid" stageName="RestoreCruiseAndUpgrade" />
        <pipeline pipelineName="someMessages-Grid" stageName="Compile" />
        <pipeline pipelineName="Grid-Manager" stageName="CompileUnitTest" />
      </materials>

      <stage name="WiredTests">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="Database">

            <tasks>
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="svn/someone.somemessages" />
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="someMessages" dest="someone.somemessages/target" />
              <ant buildfile="build.xml" target="run-database-regression-tests" workingdir="someone.somemessages" />
            </tasks>
            <resources>
              <resource>mono</resource>
              <resource>somemessages_odbc</resource>

            </resources>
            <artifacts>
              <test src="someone.somemessages/target/tests/Tests.someone.Database.nUnit.xml" />
            </artifacts>
          </job>
          <job name="Messages.Grid">
            <tasks>
              <exec command="rm" args="-rf someone.somemessages/target/someMessages" />
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="svn/someone.somemessages" />

              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="someMessages" dest="someone.somemessages/target" />
              <ant buildfile="build.xml" target="run-wired-tests" workingdir="someone.somemessages" />
            </tasks>
            <resources>
              <resource>mono</resource>
              <resource>somemessages_odbc</resource>
            </resources>
            <artifacts>

              <test src="someone.somemessages/target/tests/Tests.someone.Messages.Grid.AllWired.nUnit.xml" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="IntegrationTests">
        <jobs>
          <job name="Messages.Grid">
            <tasks>

              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="svn/someone.somemessages" />
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="someMessages" dest="someone.somemessages/target" />
              <fetchartifact pipeline="Grid-Manager" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-manager.jar" dest="someone.somemessages/target/grid" />
              <fetchartifact pipeline="Grid-Manager" stage="CompileUnitTest" job="BuildAndTest" srcfile="api" dest="someone.somemessages/target/grid" />
              <fetchartifact pipeline="Grid-Manager" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-manager-etc-dev.zip" dest="someone.somemessages/target" />
              <ant buildfile="build.xml" target="run-integration-tests" workingdir="someone.somemessages" />
            </tasks>
            <resources>
              <resource>mono</resource>

              <resource>somemessages_odbc</resource>
            </resources>
            <artifacts>
              <test src="someone.somemessages/target/tests" />
              <artifact src="someone.somemessages/target/grid/grid-manager.log" dest="logs/integration" />
            </artifacts>
          </job>
        </jobs>

      </stage>
      <stage name="FunctionalTest">
        <jobs>
          <job name="Grid-FunctionalTests">
            <tasks>
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="svn/someone.somemessages" />
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="someMessages" dest="someone.somemessages/target" />
              <fetchartifact pipeline="Grid-Manager" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-manager.jar" dest="someone.somemessages/target/grid" />
              <fetchartifact pipeline="Grid-Manager" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-manager-etc-dev.zip" dest="someone.somemessages/target" />

              <exec command="mono" args="--version" />
              <ant buildfile="build.xml" target="run-functional-tests" workingdir="someone.somemessages" />
            </tasks>
            <resources>
              <resource>mono</resource>
              <resource>somemessages_odbc</resource>
            </resources>
            <artifacts>

              <test src="someone.somemessages/target/tests" />
              <artifact src="someone.somemessages/target/grid/grid-manager.log" dest="logs/functional" />
            </artifacts>
          </job>
          <job name="GridEjectionTests">
            <tasks>
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="svn/someone.somemessages" />
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="someMessages" dest="someone.somemessages/target" />
              <fetchartifact pipeline="Grid-Manager" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-manager.jar" dest="someone.somemessages/target/grid" />

              <fetchartifact pipeline="Grid-Manager" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-manager-etc-dev.zip" dest="someone.somemessages/target" />
              <ant buildfile="build.xml" target="run-functional-ejection-tests" workingdir="someone.somemessages" />
            </tasks>
            <resources>
              <resource>mono</resource>
              <resource>somemessages_odbc</resource>
            </resources>
            <artifacts>

              <test src="someone.somemessages/target/tests" />
              <artifact src="someone.somemessages/target/grid/grid-manager.log" dest="logs/functional" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="RegressionTests">
        <jobs>
          <job name="Messages.Storage">

            <tasks>
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="svn/someone.somemessages" />
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="someMessages" dest="someone.somemessages/target" />
              <ant buildfile="build.xml" target="run-Messages.Storage-regression-tests" workingdir="someone.somemessages" />
            </tasks>
            <resources>
              <resource>mono</resource>
              <resource>somemessages_odbc</resource>

            </resources>
            <artifacts>
              <test src="someone.somemessages/target/tests/Tests.someone.Messages.Storage.nUnit.xml" />
            </artifacts>
          </job>
          <job name="Common">
            <tasks>
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="svn/someone.somemessages" />
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="someMessages" dest="someone.somemessages/target" />

              <ant buildfile="build.xml" target="run-common-regression-tests" workingdir="someone.somemessages" />
              <ant buildfile="build.xml" target="run-common-notifier-regression-tests" workingdir="someone.somemessages" />
            </tasks>
            <resources>
              <resource>mono</resource>
              <resource>somemessages_odbc</resource>
            </resources>
            <artifacts>

              <test src="someone.somemessages/target/tests/Tests.someone.Common.nUnit.xml" />
            </artifacts>
          </job>
          <job name="Messages.Common">
            <tasks>
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="svn/someone.somemessages" />
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="someMessages" dest="someone.somemessages/target" />
              <ant buildfile="build.xml" target="run-Messages.Common-regression-tests" workingdir="someone.somemessages" />
            </tasks>

            <resources>
              <resource>mono</resource>
              <resource>somemessages_odbc</resource>
            </resources>
            <artifacts>
              <test src="someone.somemessages/target/tests/Tests.someone.Messages.Common.nUnit.xml" />
            </artifacts>
          </job>

          <job name="Messages.Daemon">
            <tasks>
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="svn/someone.somemessages" />
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="someMessages" dest="someone.somemessages/target" />
              <ant buildfile="build.xml" target="run-Messages.Daemon-regression-tests" workingdir="someone.somemessages" />
            </tasks>
            <resources>
              <resource>mono</resource>

              <resource>somemessages_odbc</resource>
            </resources>
            <artifacts>
              <test src="someone.somemessages/target/tests/Tests.someone.Messages.Daemon.nUnit.xml" />
            </artifacts>
          </job>
          <job name="Messages.Gateways">
            <tasks>

              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="svn/someone.somemessages" />
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="someMessages" dest="someone.somemessages/target" />
              <ant buildfile="build.xml" target="run-Messages.Gateways-regression-tests" workingdir="someone.somemessages" />
            </tasks>
            <resources>
              <resource>mono</resource>
              <resource>somemessages_odbc</resource>
            </resources>

            <artifacts>
              <test src="someone.somemessages/target/tests/Tests.someone.Messages.Gateways.nUnit.xml" />
            </artifacts>
          </job>
          <job name="Messages.Msf">
            <tasks>
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="svn/someone.somemessages" />
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="someMessages" dest="someone.somemessages/target" />
              <ant buildfile="build.xml" target="run-Messages.Msf-regression-tests" workingdir="someone.somemessages" />

            </tasks>
            <resources>
              <resource>mono</resource>
              <resource>somemessages_odbc</resource>
            </resources>
            <artifacts>
              <test src="someone.somemessages/target/tests/Tests.someone.Messages.Msf.nUnit.xml" />
            </artifacts>

          </job>
          <job name="Messages.Qc">
            <tasks>
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="svn/someone.somemessages" />
              <fetchartifact pipeline="someMessages-Grid" stage="Compile" job="CompileOnWindows" srcdir="someMessages" dest="someone.somemessages/target" />
              <ant buildfile="build.xml" target="run-Messages.Qc-regression-tests" workingdir="someone.somemessages" />
            </tasks>
            <resources>
              <resource>mono</resource>

              <resource>somemessages_odbc</resource>
            </resources>
            <artifacts>
              <test src="someone.somemessages/target/tests/Tests.someone.Messages.Qc.nUnit.xml" />
            </artifacts>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="Grid-Adapter">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/MIF/GridAdapter/trunk/grid-adapter-war" username="java-builder" password="*******" dest="grid-adapter-war" />
      </materials>
      <stage name="CompileUnitTest">
        <jobs>
          <job name="CompileUnitTest">

            <tasks>
              <exec command="mvn" args="-Denvironment=build-server -e clean package surefire-report:report" workingdir="grid-adapter-war" />
              <exec command="bash" args="/home/builder/tools/specs/setrevision.sh . tools/sv_release.txt" workingdir="grid-adapter-war" />
            </tasks>
            <tabs>
              <tab name="surefire-report" path="site/surefire-report.html" />
              <tab name="coverage-report" path="site/cobertura/index.html" />
            </tabs>
            <resources>

              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <artifact src="grid-adapter-war/target/grid-adapter.jar" />
              <artifact src="grid-adapter-war/etc/dev/grid-adapter/gridadapter.properties" />
              <artifact src="grid-adapter-war/target/site" />
              <artifact src="grid-adapter-war/tools" />
              <artifact src="grid-adapter-war/tools/grid-adapter.sh" />

              <artifact src="grid-adapter-war/tools/grid-adapter" />
              <artifact src="grid-adapter-war/etc" />
              <test src="grid-adapter-war/target/surefire-reports" dest="unit-test-reports" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="FunctionalTest">
        <jobs>

          <job name="FunctionalTest">
            <tasks>
              <exec command="mvn" args="-Denvironment=build-server -Pfunctional-test clean test surefire-report:report" workingdir="grid-adapter-war" />
            </tasks>
            <tabs>
              <tab name="surefire-test" path="site/surefire-report.html" />
              <tab name="coverage-report" path="site/cobertura/index.html" />
            </tabs>
            <resources>

              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <artifact src="grid-adapter-war/target/site" />
              <test src="grid-adapter-war/target/surefire-reports" dest="functional-test-reports" />
            </artifacts>
          </job>
        </jobs>

      </stage>
      <stage name="BuildRPMs">
        <jobs>
          <job name="Build_sv-java-gridadapter">
            <tasks>
              <fetchartifact pipeline="Grid-Adapter" stage="CompileUnitTest" job="CompileUnitTest" srcfile="grid-adapter.jar" dest="grid-adapter/target" />
              <fetchartifact pipeline="Grid-Adapter" stage="CompileUnitTest" job="CompileUnitTest" srcdir="etc" dest="grid-adapter" />
              <fetchartifact pipeline="Grid-Adapter" stage="CompileUnitTest" job="CompileUnitTest" srcfile="tools/sv_release.txt" dest="grid-adapter" />
              <fetchartifact pipeline="Grid-Adapter" stage="CompileUnitTest" job="CompileUnitTest" srcfile="tools/grid-adapter.sh" dest="grid-adapter/tools" />

              <fetchartifact pipeline="Grid-Adapter" stage="CompileUnitTest" job="CompileUnitTest" srcfile="tools/grid-adapter" dest="grid-adapter/tools" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="grid-adapter" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridadapter-etc" workingdir="grid-adapter" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridadapter" workingdir="grid-adapter" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="grid-adapter" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="grid-adapter/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="MSFEndpointGridAdapter">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/MIF/MSFEndPointGridAdapterFunctionalTests/trunk/msfendpoint-functional-tests" username="java-builder" password="*******" dest="msfendpoint-functional-tests" />
        <pipeline pipelineName="MSFEndpoint" stageName="CompileUnitTestMSFEndpoint" />
        <pipeline pipelineName="Grid-Adapter" stageName="CompileUnitTest" />
        <pipeline pipelineName="Database-someMessages-Grid" stageName="RestoreCruiseAndUpgrade" />
      </materials>
      <stage name="FunctionalTests">
        <jobs>

          <job name="RunFunctionalTests">
            <tasks>
              <ant buildfile="build.xml" target="clean -Denvironment=build-server" workingdir="msfendpoint-functional-tests" />
              <fetchartifact pipeline="Grid-Adapter" stage="CompileUnitTest" job="CompileUnitTest" srcfile="grid-adapter.war" dest="msfendpoint-functional-tests/target" />
              <fetchartifact pipeline="Grid-Adapter" stage="CompileUnitTest" job="CompileUnitTest" srcdir="etc" dest="msfendpoint-functional-tests/target" />
              <fetchartifact pipeline="Grid-Adapter" stage="CompileUnitTest" job="CompileUnitTest" srcfile="tools/sv_release.txt" dest="msfendpoint-functional-tests/target" />
              <fetchartifact pipeline="Grid-Adapter" stage="CompileUnitTest" job="CompileUnitTest" srcfile="gridadapter.properties" dest="msfendpoint-functional-tests/target" />
              <fetchartifact pipeline="Grid-Adapter" stage="CompileUnitTest" job="CompileUnitTest" srcfile="gridadapter-changeable.properties" dest="msfendpoint-functional-tests/target" />
              <fetchartifact pipeline="MSFEndpoint" stage="CompileUnitTestMSFEndpoint" job="CompileUnitTestMSFEndpoint" srcfile="msfendpoint.xml" dest="msfendpoint-functional-tests/target" />

              <fetchartifact pipeline="MSFEndpoint" stage="CompileUnitTestMSFEndpoint" job="CompileUnitTestMSFEndpoint" srcfile="msfendpointear.ear" dest="msfendpoint-functional-tests/target" />
              <fetchartifact pipeline="MSFEndpoint" stage="CompileUnitTestMSFEndpoint" job="CompileUnitTestMSFEndpoint" srcdir="etc" dest="msfendpoint" />
              <fetchartifact pipeline="MSFEndpoint" stage="CompileUnitTestMSFEndpoint" job="CompileUnitTestMSFEndpoint" srcfile="sv_release.txt" dest="msfendpoint" />
              <fetchartifact pipeline="MSFEndpoint" stage="CompileUnitTestMSFEndpoint" job="CompileUnitTestMSFEndpoint" srcfile="msfendpoint.supervisor.war" dest="msfendpoint" />
              <ant buildfile="build.xml" target="cruise.build -Denvironment=build-server -Dlast.good.grid.build=latest" workingdir="msfendpoint-functional-tests" />
            </tasks>
            <tabs>
              <tab name="test-report" path="test-reports/output/index.html" />
            </tabs>

            <resources>
              <resource>msfendpoint_jboss</resource>
            </resources>
            <artifacts>
              <test src="msfendpoint-functional-tests/target/test-reports" />
              <artifact src="msfendpoint-functional-tests/target/grid-adapter.war" dest="grid-adapter" />
              <artifact src="msfendpoint-functional-tests/target/grid-adapter-control.war" dest="grid-adapter" />
              <artifact src="msfendpoint-functional-tests/target/etc" dest="grid-adapter" />

              <artifact src="msfendpoint-functional-tests/target/sv_release.txt" dest="grid-adapter" />
              <artifact src="msfendpoint-functional-tests/target/msfendpointear.ear" dest="msfendpoint" />
              <artifact src="msfendpoint/etc" dest="msfendpoint" />
              <artifact src="msfendpoint/sv_release.txt" dest="msfendpoint" />
              <artifact src="msfendpoint/msfendpoint.supervisor.war" dest="msfendpoint" />
            </artifacts>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="someMessages-EJB">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone-somemessages-ejb/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="package">
        <jobs>
          <job name="CompileAndUnitTest">

            <tasks>
              <exec command="mvn" args="'-DMAVEN_OPTS=-Xmx1536m -Xms512m' clean package deploy" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <artifact src="target/somemessages-ejb-1.1.0-SNAPSHOT.jar" />

              <artifact src="target/somemessages-ejb-1.1.0-SNAPSHOT-client.jar" />
              <test src="target/surefire-reports" dest="unit-test-reports" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Database-someMessages-Grid-Qa2">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />

      <materials>
        <svn url="https://svn.someone.lan/svn/someone.databases/trunk" username="java-builder" password="*******" />
        <pipeline pipelineName="Database-someMessages-Grid" stageName="RestoreCruiseAndUpgrade" />
      </materials>
      <stage name="DestroyAndRebuildQa2">
        <approval type="manual" />
        <jobs>
          <job name="dmardb01-somemessages_qa2">
            <tasks>

              <fetchartifact pipeline="Database-someMessages-Grid" stage="RestoreCruiseAndUpgrade" job="RestoreCruiseAndUpgrade" srcdir="target/informix_db_changes" dest="cvs/data" />
              <fetchartifact pipeline="Database-someMessages-Grid" stage="RestoreCruiseAndUpgrade" job="RestoreCruiseAndUpgrade" srcdir="target/stored_procedures" dest="cvs/data" />
              <ant buildfile="build.xml" target="-verbose fresh-rebuild-db -Ddb_suffix=qa2" />
            </tasks>
            <resources>
              <resource>dbrestore</resource>
            </resources>
          </job>

        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="GRID-Core">
    <pipeline name="Grid-Performance-Analyser">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.grid/trunk/grid-performance-analyser" username="java-builder" password="*******" />

      </materials>
      <stage name="PerformanceTest-Common">
        <jobs>
          <job name="GridPerformanceAnalyser_BuildAndTest">
            <tasks>
              <ant target="main" />
            </tasks>
            <tabs>
              <tab name="UnitTests" path="test-reports/output/index.html" />

            </tabs>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/grid-performance-analyser.jar" />
              <artifact src="target/reports.css" />
            </artifacts>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Grid-Common">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.grid/trunk/grid-common" username="java-builder" password="*******" />
      </materials>

      <stage name="CompileUnitTest">
        <jobs>
          <job name="BuildAndTest">
            <tasks>
              <ant target="-Denvironment=build-server test" />
              <ant target="-Denvironment=build-server deploy.to.artifactory" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
            <artifacts>
              <artifact src="target/artifacts/grid-common.jar" />
              <artifact src="target/artifacts/grid-common-test.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>

    <pipeline name="Grid-Lattice">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.grid/trunk/grid-lattice" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="GenerateSharedLib">
        <jobs>
          <job name="make">
            <tasks>

              <exec command="/home/builder/tools/specs/setrevision.sh" args=". sv_release.txt" workingdir="source" />
              <exec command="/usr/bin/make" args="clean" workingdir="source/Release" />
              <exec command="/usr/bin/make" args="all" workingdir="source/Release" />
            </tasks>
            <resources>
              <resource>gcc</resource>
            </resources>
            <artifacts>

              <artifact src="source/Release/libgrid-lattice.so" />
              <artifact src="source/sv_release.txt" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Grid-Manager-DC-Specific-RPMs">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />

      <materials>
        <svn url="https://svn.someone.lan/svn/someone.grid/branches/PreFullAutomation" username="java-builder" password="*******">
          <filter>
            <ignore pattern="**/*.java" />
          </filter>
        </svn>
      </materials>
      <stage name="CheckFilesAreValid">
        <jobs>

          <job name="TestConfigFiles">
            <tasks>
              <ant target="-Denvironment=build-server lib.clean-cache clean" />
              <ant target="-Denvironment=build-server bruce_test" />
              <exec command="/home/builder/tools/specs/setrevision.sh" args=". sv_release.txt" workingdir="etc/dc-specific" />
            </tasks>
            <tabs>
              <tab name="Tests" path="unit-test-report/output/index.html" />
              <tab name="localis" path="localis_affinity_dump.html" />

              <tab name="Matrix" path="matrix_affinity_dump.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/test/reports/output" dest="unit-test-report" />
              <artifact src="target/localis_affinity_dump.html" />

              <artifact src="target/matrix_affinity_dump.html" />
              <artifact src="etc/dc-specific" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="BuildRPMs">
        <jobs>
          <job name="Build_sv-java-gridmanager-etc-dc-specific">

            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="etc/dc-specific" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridmanager-etc-dev" workingdir="etc/dc-specific" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridmanager-etc-localis" workingdir="etc/dc-specific" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridmanager-etc-metro" workingdir="etc/dc-specific" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridmanager-etc-matrix" workingdir="etc/dc-specific" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridmanager-etc-stage" workingdir="etc/dc-specific" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="etc/dc-specific/target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
      <stage name="DeployTolocalisRepo">
        <approval type="manual" />
        <jobs>
          <job name="DeployTolocalis">
            <tasks>
              <fetchartifact pipeline="Grid-Manager-DC-Specific-RPMs" stage="BuildRPMs" job="Build_sv-java-gridmanager-etc-dc-specific" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytolocalis " workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createlocalisrepo " workingdir="rpm" />

            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">

        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>

              <fetchartifact pipeline="Grid-Manager-DC-Specific-RPMs" stage="BuildRPMs" job="Build_sv-java-gridmanager-etc-dc-specific" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo " workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>

        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Grid-Manager">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="Grid-Common" stageName="CompileUnitTest" />
        <pipeline pipelineName="Grid-Performance-Analyser" stageName="PerformanceTest-Common" />
        <svn url="https://svn.someone.lan/svn/someone.grid/trunk/grid-manager" username="java-builder" password="*******">

          <filter>
            <ignore pattern="etc/dc-specific/**/*.*" />
          </filter>
        </svn>
      </materials>
      <stage name="CompileUnitTest">
        <jobs>
          <job name="BuildAndTest">
            <tasks>

              <ant target="-Denvironment=build-server lib.clean-cache" />
              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common.jar" dest="lib/default" />
              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common-test.jar" dest="lib/test" />
              <ant target="-Denvironment=build-server create.artifacts" />
            </tasks>
            <tabs>
              <tab name="UnitTests" path="unit-test-report/output/index.html" />
            </tabs>
            <resources>

              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/artifacts/grid-manager.jar" />
              <artifact src="target/test/reports/output" dest="unit-test-report" />
              <artifact src="target/artifacts/grid-manager-etc-dev.zip" />
            </artifacts>
          </job>

        </jobs>
      </stage>
      <stage name="FunctionalTest">
        <jobs>
          <job name="FunctionalTest">
            <tasks>
              <fetchartifact pipeline="Grid-Manager" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-manager.jar" dest="cascade" />
              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common.jar" dest="lib/default" />
              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common-test.jar" dest="lib/test" />

              <exec command="/home/builder/tools/specs/setrevision.sh" args=". tools/sv_release.txt" />
              <ant target="-Denvironment=build-server functional-test" />
            </tasks>
            <tabs>
              <tab name="functional-test" path="target/functionaltest/reports/output/index.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
            <artifacts>
              <artifact src="cascade/grid-manager.jar" />
              <artifact src="etc" />
              <artifact src="tools/manager.sh" />
              <artifact src="tools/gridmanager" />
              <artifact src="tools/sv_release.txt" />
              <artifact src="target/functionaltest/reports" dest="target/functionaltest/" />
            </artifacts>

          </job>
        </jobs>
      </stage>
      <stage name="BuildRPM">
        <jobs>
          <job name="Build_sv-java-gridmanager">
            <tasks>
              <fetchartifact pipeline="Grid-Manager" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-manager.jar" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />

              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridmanager-etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridmanager" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>

              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployTolocalisRepo">
        <approval type="manual" />
        <jobs>
          <job name="DeployTolocalis">

            <tasks>
              <fetchartifact pipeline="Grid-Manager" stage="BuildRPM" job="Build_sv-java-gridmanager" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytolocalis " workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createlocalisrepo " workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>

            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="Grid-Manager" stage="BuildRPM" job="Build_sv-java-gridmanager" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />

              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo " workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Grid-Pipeline">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="Grid-Common" stageName="CompileUnitTest" />
        <pipeline pipelineName="Grid-Lattice" stageName="GenerateSharedLib" />

        <svn url="https://svn.someone.lan/svn/someone.grid/trunk/grid-pipeline" username="java-builder" password="*******">
          <filter>
            <ignore pattern="src/test/resources/lattice-config/es-ES/**/*.*" />
            <ignore pattern="src/test/resources/lattice-config/processor/**/*.*" />
          </filter>
        </svn>
      </materials>
      <stage name="CompileUnitTest">
        <jobs>

          <job name="BuildAndTest">
            <tasks>
              <ant target="-Denvironment=build-server lib.clean-cache" />
              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common.jar" dest="lib/default" />
              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common-test.jar" dest="lib/test" />
              <fetchartifact pipeline="Grid-Lattice" stage="GenerateSharedLib" job="make" srcfile="libgrid-lattice.so" dest="lib/native" />
              <ant target="-Denvironment=build-server create.jar" />
            </tasks>
            <tabs>

              <tab name="test-report" path="unit-test-report/output/index.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/artifacts/grid-pipeline.jar" />
              <test src="target/test/reports/output" dest="unit-test-report" />

            </artifacts>
          </job>
          <job name="Build-Performance-Pipeline">
            <tasks>
              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common.jar" dest="lib/default" />
              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common-test.jar" dest="lib/test" />
              <ant target="-Denvironment=build-server create.performance.jar" />
            </tasks>
            <tabs>

              <tab name="test-report" path="unit-test-report/output/index.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/artifacts/grid-pipeline-performancetest.jar" />
              <test src="target/test/reports/output" dest="unit-test-report" />

            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="FunctionalTest">
        <jobs>
          <job name="FunctionalTest">
            <tasks>
              <fetchartifact pipeline="Grid-Pipeline" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-pipeline.jar" dest="cascade" />

              <fetchartifact pipeline="Grid-Pipeline" stage="CompileUnitTest" job="Build-Performance-Pipeline" srcfile="grid-pipeline-performancetest.jar" dest="cascade" />
              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common.jar" dest="lib/default" />
              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common-test.jar" dest="lib/test" />
              <fetchartifact pipeline="Grid-Lattice" stage="GenerateSharedLib" job="make" srcfile="libgrid-lattice.so" dest="tools/linux" />
              <exec command="/home/builder/tools/specs/setrevision.sh" args=". tools/sv_release.txt" />
              <ant target="-Denvironment=build-server functional-test" />
            </tasks>
            <tabs>
              <tab name="test-report" path="test-report/output/index.html" />

            </tabs>
            <resources>
              <resource>ASR</resource>
            </resources>
            <artifacts>
              <artifact src="cascade/grid-pipeline.jar" />
              <artifact src="cascade/grid-pipeline-performancetest.jar" />
              <artifact src="etc" />

              <artifact src="tools/runpipeline-typicalday.sh" />
              <artifact src="tools/pipeline.sh" />
              <artifact src="tools/gridpipeline" />
              <artifact src="tools/sv_release.txt" />
              <artifact src="tools/hugepagesconfig" />
              <test src="target/functionaltest/reports/output" dest="test-report" />
            </artifacts>
          </job>
        </jobs>

      </stage>
      <stage name="BuildRPM">
        <jobs>
          <job name="Build_sv-java-gridpipeline">
            <tasks>
              <fetchartifact pipeline="Grid-Pipeline" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-pipeline.jar" />
              <fetchartifact pipeline="Grid-Pipeline" stage="CompileUnitTest" job="Build-Performance-Pipeline" srcfile="grid-pipeline-performancetest.jar" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridpipeline-etc" />

              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridpipeline" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridtestpipeline" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>

              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployTolocalisRepo">
        <approval type="manual" />
        <jobs>
          <job name="DeployTolocalis">

            <tasks>
              <fetchartifact pipeline="Grid-Pipeline" stage="BuildRPM" job="Build_sv-java-gridpipeline" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytolocalis" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createlocalisrepo " workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>

            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="Grid-Pipeline" stage="BuildRPM" job="Build_sv-java-gridpipeline" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />

              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Grid-SmokeTests">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="Grid-Manager" stageName="BuildRPM" />
        <pipeline pipelineName="Grid-Pipeline" stageName="BuildRPM" />

        <pipeline pipelineName="Database-someMessages-Grid" stageName="RestoreSmokeTestDbAndUpgrade" />
        <pipeline pipelineName="Automation-Adapter" stageName="BuildRPM" />
        <svn url="https://svn.someone.lan/svn/someone.grid/trunk/grid-smoketests" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileUnitTest">
        <jobs>
          <job name="BuildAndTest">
            <tasks>
              <ant target="deploy.and.test" />

            </tasks>
            <tabs>
              <tab name="test-report" path="test-reports/output/index.html" />
            </tabs>
            <resources>
              <resource>jsch</resource>
            </resources>
            <artifacts>

              <artifact src="target/test-reports" />
              <artifact src="target/grid-smoketests.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Grid-Pipeline-ManualTest">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />

      <materials>
        <pipeline pipelineName="Grid-Common" stageName="CompileUnitTest" />
        <svn url="https://svn.someone.lan/svn/someone.grid/trunk/grid-pipeline" username="java-builder" password="*******" />
      </materials>
      <stage name="ManualTest">
        <approval type="manual" />
        <jobs>
          <job name="ManualTest">
            <tasks>

              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common.jar" dest="lib/default" />
              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common-test.jar" dest="lib/test" />
              <ant target="-Denvironment=build-server manual-test" />
            </tasks>
            <tabs>
              <tab name="test-report" path="test-report/output/index.html" />
            </tabs>
            <resources>
              <resource>ASR</resource>

            </resources>
            <artifacts>
              <test src="target/manualtest/reports/output" dest="test-report" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Grid-Performance-Tests">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.grid/trunk/grid-performance-tests" username="java-builder" password="*******" />
        <pipeline pipelineName="Grid-Manager" stageName="CompileUnitTest" />
        <pipeline pipelineName="Grid-Performance-Analyser" stageName="PerformanceTest-Common" />
        <pipeline pipelineName="Grid-Common" stageName="CompileUnitTest" />
      </materials>
      <stage name="CompileUnitTest">

        <jobs>
          <job name="BuildAndTest">
            <tasks>
              <ant target="-Denvironment=build-server lib.clean-cache" />
              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common.jar" dest="lib/default" />
              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common-test.jar" dest="lib/test" />
              <fetchartifact pipeline="Grid-Manager" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-manager.jar" dest="lib/default" />
              <ant target="-Denvironment=build-server jar" />
            </tasks>

            <tabs>
              <tab name="UnitTests" path="unit-test-report/output/index.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/artifacts/grid-perftest.jar" />

              <artifact src="target/test/reports/output" dest="unit-test-report" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="EscalatingAndBurstPerformanceTest">
        <jobs>
          <job name="EscalatingAndBurstPerformanceTest">
            <tasks>

              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common.jar" dest="lib/default" />
              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common-test.jar" dest="lib/test" />
              <fetchartifact pipeline="Grid-Performance-Analyser" stage="PerformanceTest-Common" job="GridPerformanceAnalyser_BuildAndTest" srcfile="grid-performance-analyser.jar" dest="lib/test" />
              <fetchartifact pipeline="Grid-Manager" stage="BuildRPM" job="Build_sv-java-gridmanager" srcdir="rpm" />
              <fetchartifact pipeline="Grid-Performance-Tests" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-perftest.jar" dest="lib/jmeter/lib" />
              <ant target="-Denvironment=build-server deploy.and.run.performance.tests" />
            </tasks>
            <tabs>
              <tab name="UnitTests" path="unit-test-report/output/index.html" />

              <tab name="SanityPerfTest" path="performance-test-report/jmeter-output/grid-manager-sanity-index.html" />
              <tab name="BurstPerfTest" path="performance-test-report/jmeter-output/grid-manager-burst-index.html" />
            </tabs>
            <resources>
              <resource>performance</resource>
            </resources>
            <artifacts>
              <test src="target/performancetest/reports/output" dest="unit-test-report" />

              <test src="target/jmeter-output" dest="performance-test-report" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="TypicalDay">
        <approval type="manual" />
        <jobs>
          <job name="Grid-Manager-Typical-Day">

            <tasks>
              <fetchartifact pipeline="Grid-Performance-Analyser" stage="PerformanceTest-Common" job="GridPerformanceAnalyser_BuildAndTest" srcfile="grid-performance-analyser.jar" dest="fetched-artifacts" />
              <fetchartifact pipeline="Grid-Performance-Tests" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-perftest.jar" dest="fetched-artifacts" />
              <ant buildfile="build.xml" target="run.typicalday.test" />
            </tasks>
            <tabs>
              <tab name="TypicalDay" path="output/percentiles.html" />
            </tabs>
            <resources>

              <resource>performance</resource>
            </resources>
            <artifacts>
              <artifact src="target/typicaldaytest/output" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="EscalatingLoad">
        <jobs>
          <job name="Grid-Manager-Escalating-Load">
            <tasks>
              <fetchartifact pipeline="Grid-Performance-Analyser" stage="PerformanceTest-Common" job="GridPerformanceAnalyser_BuildAndTest" srcfile="grid-performance-analyser.jar" dest="fetched-artifacts" />
              <fetchartifact pipeline="Grid-Performance-Tests" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-perftest.jar" dest="fetched-artifacts" />
              <ant buildfile="build.xml" target="run.escalatingload.test" />
            </tasks>
            <tabs>

              <tab name="EscalatingLoad" path="output/percentiles.html" />
            </tabs>
            <resources>
              <resource>performance</resource>
            </resources>
            <artifacts>
              <artifact src="target/escalatingload/output" />
            </artifacts>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Grid-Pipeline-Branch">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="Grid-Common" stageName="CompileUnitTest" />
        <pipeline pipelineName="Grid-Lattice" stageName="GenerateSharedLib" />

        <svn url="https://svn.someone.lan/svn/someone.grid/branches/grid-pipeline-etc-windscale-1.0/" username="java-builder" password="*******">
          <filter>
            <ignore pattern="src/test/resources/lattice-config/es-ES/**/*.*" />
            <ignore pattern="src/test/resources/lattice-config/processor/**/*.*" />
          </filter>
        </svn>
      </materials>
      <stage name="CompileUnitTest">
        <jobs>

          <job name="BuildAndTest">
            <tasks>
              <ant target="-Denvironment=build-server lib.clean-cache" />
              <fetchartifact pipeline="Grid-Lattice" stage="GenerateSharedLib" job="make" srcfile="libgrid-lattice.so" dest="lib/native" />
              <ant target="-Denvironment=build-server create.jar" />
            </tasks>
            <tabs>
              <tab name="test-report" path="unit-test-report/output/index.html" />
            </tabs>

            <resources>
              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/artifacts/grid-pipeline.jar" />
              <test src="target/test/reports/output" dest="unit-test-report" />
            </artifacts>
          </job>

          <job name="Build-Performance-Pipeline">
            <tasks>
              <ant target="-Denvironment=build-server create.performance.jar" />
            </tasks>
            <tabs>
              <tab name="test-report" path="unit-test-report/output/index.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
            <artifacts>
              <artifact src="target/artifacts/grid-pipeline-performancetest.jar" />
              <test src="target/test/reports/output" dest="unit-test-report" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="FunctionalTest">

        <jobs>
          <job name="FunctionalTest">
            <tasks>
              <fetchartifact pipeline="Grid-Pipeline-Branch" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-pipeline.jar" dest="cascade" />
              <fetchartifact pipeline="Grid-Pipeline-Branch" stage="CompileUnitTest" job="Build-Performance-Pipeline" srcfile="grid-pipeline-performancetest.jar" dest="cascade" />
              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common.jar" dest="lib/default" />
              <fetchartifact pipeline="Grid-Common" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-common-test.jar" dest="lib/test" />
              <fetchartifact pipeline="Grid-Lattice" stage="GenerateSharedLib" job="make" srcfile="libgrid-lattice.so" dest="tools/linux" />
              <exec command="/home/builder/tools/specs/setrevision.sh" args=". tools/sv_release.txt" />

              <ant target="-Denvironment=build-server functional-test" />
            </tasks>
            <tabs>
              <tab name="test-report" path="test-report/output/index.html" />
            </tabs>
            <resources>
              <resource>ASR</resource>
            </resources>

            <artifacts>
              <artifact src="cascade/grid-pipeline.jar" />
              <artifact src="cascade/grid-pipeline-performancetest.jar" />
              <artifact src="etc" />
              <artifact src="tools/runpipeline-typicalday.sh" />
              <artifact src="tools/pipeline.sh" />
              <artifact src="tools/gridpipeline" />
              <artifact src="tools/sv_release.txt" />
              <artifact src="tools/hugepagesconfig" />

              <test src="target/functionaltest/reports/output" dest="test-report" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="BuildRPM">
        <jobs>
          <job name="Build_sv-java-gridpipeline">
            <tasks>

              <fetchartifact pipeline="Grid-Pipeline-Branch" stage="CompileUnitTest" job="BuildAndTest" srcfile="grid-pipeline.jar" />
              <fetchartifact pipeline="Grid-Pipeline-Branch" stage="CompileUnitTest" job="Build-Performance-Pipeline" srcfile="grid-pipeline-performancetest.jar" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/setrevision.sh" args=". tools/sv_release.txt" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridpipeline-etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridpipeline" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridtestpipeline" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
      <stage name="DeployTolocalisRepo">
        <approval type="manual" />
        <jobs>
          <job name="DeployTolocalis">
            <tasks>
              <fetchartifact pipeline="Grid-Pipeline-Branch" stage="BuildRPM" job="Build_sv-java-gridpipeline" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytolocalis" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createlocalisrepo " workingdir="rpm" />

            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>

        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>

        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="Grid-Pipeline-Branch" stage="BuildRPM" job="Build_sv-java-gridpipeline" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>

  <pipelines group="MetaData">
    <pipeline name="Metadata-DB-Creator">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.metadata/trunk/metadata-db-creator" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileUnitTest">
        <jobs>
          <job name="BuildAndTest">

            <tasks>
              <ant target="-Denvironment=build-server lib.clean-cache" />
              <ant target="-Denvironment=build-server create.artifacts" />
            </tasks>
            <tabs>
              <tab name="UnitTests" path="unit-test-report/output/index.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
            <artifacts>
              <artifact src="target/artifacts/metadata-db-creator.jar" />
              <artifact src="target/test/reports/output" dest="unit-test-report" />
              <artifact src="target/artifacts/metadata-db-creator-etc-dev.zip" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="FunctionalTest">
        <jobs>
          <job name="FunctionalTest">
            <tasks>
              <fetchartifact pipeline="Metadata-DB-Creator" stage="CompileUnitTest" job="BuildAndTest" srcfile="metadata-db-creator.jar" />
              <exec command="bash" args="/home/builder/tools/specs/setrevision.sh . tools/sv_release.txt" />
              <ant target="-Denvironment=build-server functional-test" />
            </tasks>
            <tabs>

              <tab name="functional-test" path="target/functionaltest/reports/output/index.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/functionaltest/reports" dest="target/functionaltest/" />
              <artifact src="metadata-db-creator.jar" />

              <artifact src="tools/sv_release.txt" />
              <artifact src="tools/metadata-db-creator" />
              <artifact src="etc" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Metadata-Service">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.metadata/trunk/metadata-service" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileUnitTest">
        <jobs>
          <job name="BuildAndTest">
            <tasks>
              <ant target="-Denvironment=build-server lib.clean-cache" />

              <ant target="-Denvironment=build-server create.artifacts" />
            </tasks>
            <tabs>
              <tab name="UnitTests" path="unit-test-report/output/index.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>

            <artifacts>
              <artifact src="target/artifacts/metadata-service.jar" />
              <artifact src="target/test/reports/output" dest="unit-test-report" />
              <artifact src="target/artifacts/metadata-service-etc-dev.zip" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="FunctionalTest">

        <jobs>
          <job name="FunctionalTest">
            <tasks>
              <fetchartifact pipeline="Metadata-Service" stage="CompileUnitTest" job="BuildAndTest" srcfile="metadata-service.jar" />
              <exec command="bash" args="/home/builder/tools/specs/setrevision.sh . tools/sv_release.txt" />
              <ant target="-Denvironment=build-server functional-test" />
            </tasks>
            <tabs>
              <tab name="functional-test" path="target/functionaltest/reports/output/index.html" />

            </tabs>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/functionaltest/reports" dest="target/functionaltest/" />
              <artifact src="metadata-service.jar" />
              <artifact src="tools/sv_release.txt" />

              <artifact src="tools/metadata-service.sh" />
              <artifact src="tools/metadata-service" />
              <artifact src="etc" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Metadata-Service-Performance-Tests">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.metadata/trunk/metadata-service-performance-test" username="java-builder" password="*******" />
        <pipeline pipelineName="Metadata-Service" stageName="CompileUnitTest" />
        <pipeline pipelineName="Grid-Performance-Analyser" stageName="PerformanceTest-Common" />
        <pipeline pipelineName="RPM-Metadata-Service" stageName="BuildRPMs" />
      </materials>
      <stage name="CompileUnitTest">
        <jobs>

          <job name="BuildAndTest">
            <tasks>
              <ant target="-Denvironment=build-server lib.clean-cache" />
              <fetchartifact pipeline="Metadata-Service" stage="CompileUnitTest" job="BuildAndTest" srcfile="metadata-service.jar" dest="lib/default" />
              <ant target="-Denvironment=build-server jar" />
            </tasks>
            <tabs>
              <tab name="UnitTests" path="unit-test-report/output/index.html" />
            </tabs>

            <resources>
              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/artifacts/metadata-service-perftest.jar" />
              <artifact src="target/test/reports/output" dest="unit-test-report" />
            </artifacts>
          </job>

        </jobs>
      </stage>
      <stage name="SanityPerformanceTest">
        <jobs>
          <job name="SanityPerformanceTest">
            <tasks>
              <fetchartifact pipeline="Grid-Performance-Analyser" stage="PerformanceTest-Common" job="GridPerformanceAnalyser_BuildAndTest" srcfile="grid-performance-analyser.jar" dest="lib/test" />
              <fetchartifact pipeline="RPM-Metadata-Service" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <fetchartifact pipeline="Metadata-Service-Performance-Tests" stage="CompileUnitTest" job="BuildAndTest" srcfile="metadata-service-perftest.jar" dest="lib/jmeter/lib" />

              <ant target="-Denvironment=build-server deploy.and.run.performance.tests" />
            </tasks>
            <tabs>
              <tab name="UnitTests" path="unit-test-report/output/index.html" />
              <tab name="SanityPerfTest" path="performance-test-report/jmeter-output/metadata-service-sanity-index.html" />
            </tabs>
            <resources>
              <resource>performance</resource>

            </resources>
            <artifacts>
              <test src="target/performancetest/reports/output" dest="unit-test-report" />
              <test src="target/jmeter-output" dest="performance-test-report" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>

    <pipeline name="Metadata-Data-Evaluator">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.metadata/trunk/metadata-data-evaluator" username="java-builder" password="*******" />
        <pipeline pipelineName="RPM-Metadata-DB-Data" stageName="BuildRPMs" />
      </materials>
      <stage name="CompileUnitTest">
        <jobs>
          <job name="BuildAndTest">

            <tasks>
              <ant target="-Denvironment=build-server lib.clean-cache" />
              <ant target="-Denvironment=build-server create.artifacts" />
            </tasks>
            <tabs>
              <tab name="UnitTests" path="unit-test-report/output/index.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
            <artifacts>
              <artifact src="target/artifacts/metadata-data-evaluator.jar" />
              <artifact src="target/test/reports/output" dest="unit-test-report" />
              <artifact src="target/artifacts/metadata-data-evaluator-etc-dev.zip" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="EvaluationTest">
        <jobs>
          <job name="EvaluationTest">
            <tasks>
              <ant target="-Denvironment=build-server deploy.and.run.evaluation" />
            </tasks>
            <tabs>
              <tab name="UnitTests" path="unit-test-report/output/index.html" />
              <tab name="Results" path="evaluation-results" />

            </tabs>
            <resources>
              <resource>performance</resource>
            </resources>
            <artifacts>
              <test src="target/output" dest="evaluation-results" />
            </artifacts>
          </job>

        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="RPMs">
    <pipeline name="RPM-FileOpsTimer">
      <materials>
        <svn url="https://svn.someone.lan/svn/optimisation/FileOpsTimer/trunk/" username="java-builder" password="*******" />
      </materials>

      <stage name="Build">
        <jobs>
          <job name="Build">
            <tasks>
              <ant buildfile="build.xml" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
            <artifacts>
              <artifact src="etc" />
              <artifact src="src/scripts" dest="scripts" />
              <artifact src="build/jar/file-ops-timer.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="BuildRPM">
        <jobs>
          <job name="Build_sv-java-file-ops-timer">
            <tasks>
              <fetchartifact pipeline="RPM-FileOpsTimer" stage="Build" job="Build" srcfile="file-ops-timer.jar" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-file-ops-timer-etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-file-ops-timer" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />

            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>

        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>

        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-FileOpsTimer" stage="BuildRPM" job="Build_sv-java-file-ops-timer" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-Automation-Adapter">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="Automation-Adapter-1.0-BugFix" stageName="CompileUnitTest" />

      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=Automation-Adapter-1.0-BugFix stage=CompileUnitTest job=BuildAndTest srcfile=automation-adapter.jar" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=Automation-Adapter-1.0-BugFix stage=CompileUnitTest job=BuildAndTest srcfile=automation-adapter dest=tools " />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=Automation-Adapter-1.0-BugFix stage=CompileUnitTest job=BuildAndTest srcfile=automation-adapter.sh dest=tools " />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=Automation-Adapter-1.0-BugFix stage=CompileUnitTest job=BuildAndTest srcfile=sv_release.txt" />

              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-automation-adapter" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>

              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>

          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-Automation-Adapter" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo " workingdir="rpm" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="RPM-Automation-Adapter-UI">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="Automation-Adapter-UI" stageName="CompileUnitTest" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>

          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=Automation-Adapter-UI stage=CompileUnitTest job=BuildAndTest srcfile=automation-adapter.war" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=Automation-Adapter-UI stage=CompileUnitTest job=BuildAndTest srcfile=sv_release.txt" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-automation-adapter-ui" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">

            <tasks>
              <fetchartifact pipeline="RPM-Automation-Adapter-UI" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo " workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-someMessages">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />

      <materials>
        <pipeline pipelineName="someMessages-Grid" stageName="UnitTest" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <fetchartifact pipeline="someMessages-Grid" stage="UnitTest" job="UnitTest" srcdir="WebServices/" dest="bin" />
              <fetchartifact pipeline="someMessages-Grid" stage="UnitTest" job="UnitTest" srcdir="etc" dest="bin" />

              <fetchartifact pipeline="someMessages-Grid" stage="UnitTest" job="UnitTest" srcdir="bin/" dest="bin/ScoringAndRemoting" />
              <fetchartifact pipeline="someMessages-Grid" stage="UnitTest" job="UnitTest" srcfile="sv_release.txt" dest="source" />
              <exec command="/bin/pwd" />
              <exec command="ls" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-mono-messages" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-mono-messages-etc" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo " workingdir="source" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>

          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-someMessages" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="AutoDeployment">
        <approval type="manual">
          <authorization>
            <role>beta</role>

          </authorization>
        </approval>
        <jobs>
          <job name="DeployToVm83">
            <tasks>
              <exec command="/usr/bin/perl" args="/home/builder/tools/autodeployer/autodeployer.pl vm83 somemessages" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-MSF">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="MSF" stageName="Build" />

      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <fetchartifact pipeline="MSF" stage="Build" job="compile" srcdir="Compiled" />
              <fetchartifact pipeline="MSF" stage="Build" job="compile" srcdir="etc" />
              <exec command="/home/builder/tools/specs/build.sh" args=" clean" workingdir="Compiled" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-mono-msf" workingdir="Compiled" />

              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="Compiled" />
              <exec command="/bin/rm" args="-frv PrecompiledWeb" workingdir="Compiled" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="Compiled/target/rpm" />

            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToDev">
        <approval type="manual" />
        <jobs>
          <job name="DeployToVm68">
            <tasks>

              <exec command="/usr/bin/perl" args="/home/builder/tools/autodeployer/autodeployer.pl vm68 msf" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>

      <stage name="DeployToCanResponses">
        <approval type="manual" />
        <jobs>
          <job name="DeployToVm32">
            <tasks>
              <exec command="/usr/bin/perl" args="/home/builder/tools/autodeployer/autodeployer.pl vm32 msf-can" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
          </job>
          <job name="DeployToTlogiot01">
            <tasks>
              <exec command="/usr/bin/perl" args="/home/builder/tools/autodeployer/autodeployer.pl tlogiot01 msf-can" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
          </job>
          <job name="DeployToTlogiot02">
            <tasks>
              <exec command="/usr/bin/perl" args="/home/builder/tools/autodeployer/autodeployer.pl tlogiot02 msf-can" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>

          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-MSF" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBeta">
        <approval type="manual">

          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <exec command="/usr/bin/perl" args="/home/builder/tools/autodeployer/autodeployer.pl vm13 msf" />

            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>

    <pipeline name="RPM-Grid-Adapter">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="MSFEndpointGridAdapter" stageName="FunctionalTests" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>

              <fetchartifact pipeline="MSFEndpointGridAdapter" stage="FunctionalTests" job="RunFunctionalTests" srcfile="grid-adapter/grid-adapter.war" dest="grid-adapter/target" />
              <fetchartifact pipeline="MSFEndpointGridAdapter" stage="FunctionalTests" job="RunFunctionalTests" srcdir="grid-adapter/etc" dest="grid-adapter" />
              <fetchartifact pipeline="MSFEndpointGridAdapter" stage="FunctionalTests" job="RunFunctionalTests" srcfile="grid-adapter/sv_release.txt" dest="grid-adapter" />
              <fetchartifact pipeline="MSFEndpointGridAdapter" stage="FunctionalTests" job="RunFunctionalTests" srcfile="grid-adapter/grid-adapter-control.war" dest="grid-adapter/target" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="grid-adapter" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridadapter-etc" workingdir="grid-adapter" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridadapter" workingdir="grid-adapter" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="grid-adapter" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="grid-adapter/target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>

          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-Grid-Adapter" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" dest="grid-adapter/target" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="grid-adapter" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="grid-adapter" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-MSFEndpoint">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="MSFEndpointGridAdapter" stageName="FunctionalTests" />

      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <fetchartifact pipeline="MSFEndpointGridAdapter" stage="FunctionalTests" job="RunFunctionalTests" srcdir="msfendpoint/etc" dest="msfendpoint" />
              <fetchartifact pipeline="MSFEndpointGridAdapter" stage="FunctionalTests" job="RunFunctionalTests" srcfile="msfendpoint/sv_release.txt" dest="msfendpoint" />
              <fetchartifact pipeline="MSFEndpointGridAdapter" stage="FunctionalTests" job="RunFunctionalTests" srcfile="msfendpoint/msfendpointear.ear" dest="msfendpoint" />
              <fetchartifact pipeline="MSFEndpointGridAdapter" stage="FunctionalTests" job="RunFunctionalTests" srcfile="msfendpoint/msfendpoint.supervisor.war" dest="msfendpoint" />

              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="msfendpoint/etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-messages-msfendpoint-etc" workingdir="msfendpoint/etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="msfendpoint" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-messages-msfendpoint" workingdir="msfendpoint" />
              <exec command="/bin/bash" args="-c &quot;/bin/mv target/rpm/sv-java-messages-msfendpoint-* ../target/rpm/&quot;" workingdir="msfendpoint/etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-messages-msfendpoint-supervisor" workingdir="msfendpoint" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="msfendpoint" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="msfendpoint/target" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">

            <tasks>
              <fetchartifact pipeline="RPM-MSFEndpoint" stage="BuildRPMs" job="BuildRPMs" srcdir="target/rpm" dest="msfendpoint/target" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="msfendpoint" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="msfendpoint" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-Metadata-Service">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="Metadata-Service" stageName="FunctionalTest" />
      </materials>

      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <fetchartifact pipeline="Metadata-Service" stage="FunctionalTest" job="FunctionalTest" srcfile="metadata-service.jar" />
              <fetchartifact pipeline="Metadata-Service" stage="FunctionalTest" job="FunctionalTest" srcfile="sv_release.txt" />
              <fetchartifact pipeline="Metadata-Service" stage="FunctionalTest" job="FunctionalTest" srcdir="etc" />
              <fetchartifact pipeline="Metadata-Service" stage="FunctionalTest" job="FunctionalTest" srcfile="metadata-service.sh" dest="tools" />
              <fetchartifact pipeline="Metadata-Service" stage="FunctionalTest" job="FunctionalTest" srcfile="metadata-service" dest="tools" />

              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-metadataservice-etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-metadataservice" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployTolocalisRepo">
        <approval type="manual" />
        <jobs>

          <job name="DeployTolocalis">
            <tasks>
              <fetchartifact pipeline="RPM-Metadata-Service" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytolocalis " workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createlocalisrepo " workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">

          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-Metadata-Service" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />

              <exec command="bash" args="/home/builder/tools/specs/build.sh deploytobeta" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh createbetarepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="RPM-Metadata-DB-Data">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.metadata/trunk/metadata-db-data" username="java-builder" password="*******" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>

          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-metadatadbdata" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployTolocalisRepo">
        <approval type="manual" />

        <jobs>
          <job name="DeployTolocalis">
            <tasks>
              <fetchartifact pipeline="RPM-Metadata-DB-Data" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytolocalis " workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createlocalisrepo " workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">

          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-Metadata-DB-Data" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />

              <exec command="bash" args="/home/builder/tools/specs/build.sh deploytobeta" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh createbetarepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="RPM-Metadata-DB-Creator">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="Metadata-DB-Creator" stageName="FunctionalTest" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>

          <job name="BuildRPMs">
            <tasks>
              <fetchartifact pipeline="Metadata-DB-Creator" stage="FunctionalTest" job="FunctionalTest" srcfile="metadata-db-creator.jar" />
              <fetchartifact pipeline="Metadata-DB-Creator" stage="FunctionalTest" job="FunctionalTest" srcdir="etc" />
              <fetchartifact pipeline="Metadata-DB-Creator" stage="FunctionalTest" job="FunctionalTest" srcfile="metadata-db-creator" dest="tools" />
              <fetchartifact pipeline="Metadata-DB-Creator" stage="FunctionalTest" job="FunctionalTest" srcfile="sv_release.txt" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-metadatadbcreator-etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-metadatadbcreator" />

              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>

          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>

        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-Metadata-DB-Creator" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh deploytobeta" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh createbetarepo" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-Grid-Pipeline">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />

      <materials>
        <pipeline pipelineName="Grid-Pipeline" stageName="FunctionalTest" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcfile=grid-pipeline.jar" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcfile=grid-pipeline-performancetest.jar" />

              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcdir=etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcfile=runpipeline-typicalday.sh dest=tools" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcfile=pipeline.sh dest=tools" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcfile=gridpipeline dest=tools" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcfile=sv_release.txt" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcfile=hugepagesconfig dest=tools" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridpipeline-etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridpipeline" />

              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridtestpipeline" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />

            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>

          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-Grid-Pipeline" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="rpm" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="RPM-Grid-Manager">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="Grid-Manager" stageName="FunctionalTest" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>

          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcdir=etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcfile=grid-manager.jar" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcfile=sv_release.txt" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcfile=manager.sh dest=tools" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcfile=gridmanager dest=tools" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridmanager-etc" />

              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridmanager" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />

            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>

          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-Grid-Manager" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo " workingdir="rpm" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="RPM-Grid-Lattice">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="Grid-Lattice" stageName="GenerateSharedLib" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>

          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=GenerateSharedLib job=make srcfile=libgrid-lattice.so" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=GenerateSharedLib job=make srcfile=sv_release.txt" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-libgrid-lattice" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">

            <tasks>
              <fetchartifact pipeline="RPM-Grid-Lattice" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo " workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-Grid-Manager-DC-Specific-RPMs">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="Grid-Manager-DC-Specific-RPMs" stageName="CheckFilesAreValid" />
      </materials>

      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=CheckFilesAreValid job=TestConfigFiles srcdir=dc-specific dest=etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="etc/dc-specific" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridmanager-etc-dev" workingdir="etc/dc-specific" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridmanager-etc-localis" workingdir="etc/dc-specific" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridmanager-etc-metro" workingdir="etc/dc-specific" />

              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridmanager-etc-matrix" workingdir="etc/dc-specific" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridmanager-etc-stage" workingdir="etc/dc-specific" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="etc/dc-specific" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>

              <artifact src="etc/dc-specific/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>

          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-Grid-Manager-DC-Specific-RPMs" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo " workingdir="rpm" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-StatsServer">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="StatsServer" stageName="FunctionalTest" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcfile=stats-server.jar" />

              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcfile=stats-server dest=tools" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcfile=stats-server.sh dest=tools" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcfile=sv_release.txt dest=tools" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=FunctionalTest job=FunctionalTest srcdir=etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-stats-server-etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-stats-server" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>

          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-StatsServer" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh deploytobeta" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh createbetarepo " />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-Bonnington">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="Bonnington" stageName="CompileEAR" />

      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=CompileEAR job=Compile srcfile=someone-bonnington-ear-0.0.1-SNAPSHOT.ear" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=CompileEAR job=Compile srcfile=sv_release.txt" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=CompileEAR job=Compile srcdir=earetc/etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=CompileEAR job=Compile srcfile=earetc/sv_release.txt dest=etc" />

              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-bonnington" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-bonnington-etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>

            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-Bonnington" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" />

              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="RPM-lattice-processor">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ASG/trunk/lattice_processor/" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">

            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-lattice-processor" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployTolocalisRepo">
        <approval type="manual" />
        <jobs>

          <job name="DeployTolocalis">
            <tasks>
              <fetchartifact pipeline="RPM-lattice-processor" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytolocalis " workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createlocalisrepo " workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">

          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-lattice-processor" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />

              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />

            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-lattice-processor-etc">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ASG/trunk/lattice_processor/etc" username="java-builder" password="*******" dest="source" />

      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-lattice-processor-etc" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args=" createdevrepo" workingdir="source" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
      <stage name="DeployTolocalisRepo">
        <approval type="manual" />
        <jobs>
          <job name="DeployTolocalis">
            <tasks>
              <fetchartifact pipeline="RPM-lattice-processor-etc" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytolocalis " workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createlocalisrepo " workingdir="source" />

            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>

        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>

        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-lattice-processor-etc" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-lattice-processor-data">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ASG/trunk/lattice_processor_data/" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />

              <exec command="/home/builder/tools/specs/build.sh" args="build sv-lattice-processor-data" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args=" createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />

            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployTolocalisRepo">
        <approval type="manual" />
        <jobs>
          <job name="DeployTolocalis">
            <tasks>

              <fetchartifact pipeline="RPM-lattice-processor-data" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytolocalis " workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createlocalisrepo " workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>

              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>

          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-lattice-processor-data" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="source" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="RPM-lib-perl">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/lib/perl/trunk" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>

          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-lib-perl" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args=" createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">

          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-lib-perl" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />

              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />

            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-sv-mono-messages-megaboot">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/Releasing/tools/megaboot/" username="java-builder" password="*******" dest="source" />

      </materials>
      <stage name="RPM-sv-mono-messages-megaboot">
        <jobs>
          <job name="RPM-sv-mono-messages-megaboot">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-mono-messages-megaboot" workingdir="source" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">

            <tasks>
              <fetchartifact stage="RPM-sv-mono-messages-megaboot" job="RPM-sv-mono-messages-megaboot" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-sv-mono-msf-megaboot">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/Releasing/tools/msfmegaboot/" username="java-builder" password="*******" dest="source" />
      </materials>

      <stage name="RPM-sv-mono-msf-megaboot">
        <jobs>
          <job name="RPM-sv-mono-msf-megaboot">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-mono-msf-megaboot" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">

          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact stage="RPM-sv-mono-msf-megaboot" job="RPM-sv-mono-msf-megaboot" srcdir="rpm" />

              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="RPM-sv-ops-nagios">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ops/trunk/nagios/" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>

          <job name="Build-sv-ops-nagios">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args=" clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-ops-nagios" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">

          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact stage="BuildRPMs" job="Build-sv-ops-nagios" srcdir="rpm" />

              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="RPM-sv-ops-nagios-certmanager">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ops/trunk/nagios_cert_manager/" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="Build-sv-ops-nagios-certmanager">
        <jobs>

          <job name="Build-sv-ops-nagios-certmanager">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args=" clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-ops-nagios-certmanager" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-sv-ops-nagios-checks">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ops/trunk/nagios_checks/" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="Build-sv-ops-nagios-checks">
        <jobs>
          <job name="Build-sv-ops-nagios-checks">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args=" clean" workingdir="source" />

              <exec command="/home/builder/tools/specs/build.sh" args="build sv-ops-nagios-checks" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />

            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-sv-ops-nagios-etc">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ops/trunk/cgi-tools-etc/" username="java-builder" password="*******" dest="source" />

      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="Build-sv-ops-nagios-etc">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args=" clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-ops-nagios-etc" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>

          <job name="DeployToBeta">
            <tasks>
              <fetchartifact stage="BuildRPMs" job="Build-sv-ops-nagios-etc" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-sv-ops-nagios-softtat">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ops/trunk/nagios_softtat/" username="java-builder" password="*******" dest="source" />

      </materials>
      <stage name="Build-sv-ops-nagios-softtat">
        <jobs>
          <job name="Build-sv-ops-nagios-softtat">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args=" clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-ops-nagios-softtat" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="RPM-sv-ops-scripts">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ops/trunk/scripts/" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="Build-sv-ops-scripts">
        <jobs>

          <job name="Build-sv-ops-scripts">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args=" clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-ops-scripts" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-fixture">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="fixture" stageName="BuildAndUnitTest" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <fetchartifact pipeline="fixture" stage="BuildAndUnitTest" job="CompileAndUnitTest" srcdir="fitnesse-main" />

              <fetchartifact pipeline="fixture" stage="BuildAndUnitTest" job="CompileAndUnitTest" srcdir="fitnesse-resources" />
              <fetchartifact pipeline="fixture" stage="BuildAndUnitTest" job="CompileAndUnitTest" srcfile="fixture-1.0-SNAPSHOT-jar-with-dependencies.jar" />
              <fetchartifact pipeline="fixture" stage="BuildAndUnitTest" job="CompileAndUnitTest" srcfile="sv_release.txt" />
              <fetchartifact pipeline="fixture" stage="BuildAndUnitTest" job="CompileAndUnitTest" srcdir="\.svn" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-fixture" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">

            <tasks>
              <fetchartifact pipeline="RPM-fixture" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo " workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-lattice-generator">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />

      <materials>
        <pipeline pipelineName="Lattice-Generator-Branch" stageName="defaultStage" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <fetchartifact pipeline="Lattice-Generator-Branch" stage="defaultStage" job="Build" srcdir="bin" />
              <fetchartifact pipeline="Lattice-Generator-Branch" stage="defaultStage" job="Build" srcfile="bin/sv_release.txt" />

              <fetchartifact pipeline="Lattice-Generator-Branch" stage="defaultStage" job="Build" srcdir="bin/.svn" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-lattice-generator" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>

            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-lattice-generator" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />

              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo " workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-smsserver">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/someone.smserver/trunk/" username="java-builder" password="*******" dest="source" />
      </materials>

      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-smsserver" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">

            <tasks>
              <fetchartifact pipeline="RPM-smsserver" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-Grid-Pipeline-Etc-Branch">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />

      <materials>
        <svn url="https://svn.someone.lan/svn/someone.grid/branches/grid-pipeline-etc-windscale-1.0" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-gridpipeline-etc" workingdir="source" />

              <exec command="/home/builder/tools/specs/build.sh" args=" createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>

          </job>
        </jobs>
      </stage>
      <stage name="DeployTolocalisRepo">
        <approval type="manual" />
        <jobs>
          <job name="DeployTolocalis">
            <tasks>
              <fetchartifact pipeline="RPM-Grid-Pipeline-Etc-Branch" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />

              <exec command="/home/builder/tools/specs/build.sh" args="deploytolocalis " workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createlocalisrepo " workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />

            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>

          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-Grid-Pipeline-Etc-Branch" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="source" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="RPM-sv-share">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/share/trunk/" username="java-builder" password="*******" dest="build_dir" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>

          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="build_dir" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-share" workingdir="build_dir" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="build_dir" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="build_dir/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">

          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-sv-share" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />

              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="build_dir" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="build_dir" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="build_dir/target/rpm" />

            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-sv-share-asr">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/share/trunk" username="java-builder" password="*******" dest="build_dir" />

      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="build_dir" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-share-asr" workingdir="build_dir" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="build_dir" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="build_dir/target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>

          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-sv-share-asr" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="build_dir" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="build_dir" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="build_dir/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-UPF">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="UPF1" stageName="CompileUnitTest" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=CompileUnitTest job=Compile srcfile=someone.upf.ear dest=source" />

              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=CompileUnitTest job=Compile srcfile=sv_release.txt dest=source" />
              <exec command="/home/builder/tools/specs/build.sh" args="fetchartifact pipeline=dependency stage=CompileUnitTest job=Compile srcdir=etc dest=source" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh clean" workingdir="source" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh build sv-java-upf" workingdir="source" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh build sv-java-upf-etc" workingdir="source" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">

          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-UPF" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />

              <exec command="bash" args="/home/builder/tools/specs/build.sh deploytobeta" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh createbetarepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>

      </stage>
      <stage name="DeployToBeta">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>

          <job name="DeployToBeta">
            <tasks>
              <exec command="/usr/bin/perl" args="/home/builder/tools/autodeployer/autodeployer.pl vm11 upf" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>

        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-sv-asr-etc">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ASG/trunk/hud/etc" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="BuildRPMs">

        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="bash" args="/home/builder/tools/specs/build.sh clean" workingdir="source" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh build sv-asr-etc" workingdir="source" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="AutoDeployment">
        <approval type="manual" />

        <jobs>
          <job name="DeployToVm78">
            <tasks>
              <exec command="/usr/bin/perl" args="/home/builder/tools/autodeployer/autodeployer.pl vm78 sv-asr-etc" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>

        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-sv-asr-etc" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh deploytobeta" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh createbetarepo" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-sv-lattice-generator-etc">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />

      <materials>
        <svn url="https://svn.someone.lan/svn/ASG/trunk/lattice_generator/etc" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="bash" args="/home/builder/tools/specs/build.sh clean" workingdir="source" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh build sv-lattice-generator-etc" workingdir="source" />

              <exec command="bash" args="/home/builder/tools/specs/build.sh createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>

          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>

        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-sv-lattice-generator-etc" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh deploytobeta" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh createbetarepo" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-sv-asr-dogfood">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />

      <materials>
        <svn url="https://svn.someone.lan/svn/ASG/trunk/dogfood" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="bash" args="/home/builder/tools/specs/build.sh clean" workingdir="source" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh build sv-asr-dogfood" workingdir="source" />

              <exec command="bash" args="/home/builder/tools/specs/build.sh createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>

          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>

        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-sv-asr-dogfood" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh deploytobeta" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh createbetarepo" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="ServiceDelivery">

    <pipeline name="AIS">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/ais/trunk/ais" username="java-builder" password="*******" dest="ais" />
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/ais/trunk/ais-functional-tests" username="java-builder" password="*******" dest="ais-functional-tests" />
        <svn url="https://svn.someone.lan/svn/Releasing/daemontools/ais/" username="java-builder" password="*******" dest="daemontools" />
      </materials>
      <stage name="UnitTest">
        <jobs>

          <job name="CompileAISAndRunUnitTest">
            <tasks>
              <exec command="bash" args="go.sh clean" workingdir="ais" />
              <exec command="bash" args="go.sh ivy-retrieve" workingdir="ais" />
              <exec command="bash" args="go.sh jar" workingdir="ais" />
              <exec command="bash" args="go.sh test-coverage-reports" workingdir="ais" />
            </tasks>
            <tabs>
              <tab name="test-report" path="test-report/index.html" />

              <tab name="coverage-report" path="coverage.html" />
              <tab name="checkstyle" path="checkstyle/checkstyle_report.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>
              <resource>ais_settings</resource>
            </resources>
            <artifacts>

              <artifact src="ais/dist/ais.jar" />
              <artifact src="ais/dist/lib/*.jar" dest="lib" />
              <artifact src="ais/etc" />
              <artifact src="ais/resources/scripts" />
              <artifact src="ais/sv_release.txt" />
              <artifact src="ais/.svn" />
              <artifact src="daemontools" />
              <artifact src="ais/build/_files" />
              <artifact src="ais/build/coverage.html" />

              <artifact src="ais/build/checkstyle" />
              <test src="ais/build/test-report" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="FunctionalTest">
        <jobs>
          <job name="RunFunctionalTest">

            <tasks>
              <fetchartifact pipeline="AIS" stage="UnitTest" job="CompileAISAndRunUnitTest" srcfile="ais.jar" dest="ais-functional-tests" />
              <fetchartifact pipeline="AIS" stage="UnitTest" job="CompileAISAndRunUnitTest" srcdir="lib" dest="ais-functional-tests/ais-artifacts" />
              <fetchartifact pipeline="AIS" stage="UnitTest" job="CompileAISAndRunUnitTest" srcdir="lib" dest="ais" />
              <fetchartifact pipeline="AIS" stage="UnitTest" job="CompileAISAndRunUnitTest" srcdir="etc" dest="ais-functional-tests/ais-artifacts" />
              <fetchartifact pipeline="AIS" stage="UnitTest" job="CompileAISAndRunUnitTest" srcdir="scripts" dest="ais-functional-tests/ais-artifacts" />
              <fetchartifact pipeline="AIS" stage="UnitTest" job="CompileAISAndRunUnitTest" srcfile="sv_release.txt" dest="ais-functional-tests/ais-artifacts" />
              <fetchartifact pipeline="AIS" stage="UnitTest" job="CompileAISAndRunUnitTest" srcdir="\.svn" dest="ais-functional-tests/ais-artifacts" />
              <exec command="bash" args="go.sh ivy-retrieve" workingdir="ais-functional-tests" />

              <exec command="bash" args="resources/startAISServerInCruise.sh" workingdir="ais-functional-tests" />
              <exec command="bash" args="go.sh test-with-report" workingdir="ais-functional-tests" />
              <exec command="bash" args="resources/stopAISServerInCruise.sh" workingdir="ais-functional-tests" />
            </tasks>
            <tabs>
              <tab name="fun-test-report" path="test-report/index.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>

              <resource>ais_settings</resource>
            </resources>
            <artifacts>
              <test src="ais-functional-tests/build/test-report" />
              <artifact src="ais-functional-tests/resources" />
              <artifact src="ais-functional-tests/ais.jar" />
              <artifact src="ais-functional-tests/ais-artifacts/lib" />
              <artifact src="ais-functional-tests/ais-artifacts/etc" />

              <artifact src="ais-functional-tests/ais-artifacts/scripts" />
              <artifact src="ais-functional-tests/ais-artifacts/.svn" />
              <artifact src="ais-functional-tests/ais-artifacts/sv_release.txt" />
              <artifact src="daemontools" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>

    <pipeline name="AIS-Smtp-Common">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/ais/trunk/smtp-common" username="java-builder" password="*******" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="CompileUnitTest">
            <tasks>

              <exec command="bash" args="go.sh ivy-retrieve" />
              <exec command="bash" args="go.sh test-coverage-reports" />
              <exec command="bash" args="go.sh jar" />
            </tasks>
            <tabs>
              <tab name="test-report" path="test-report/index.html" />
              <tab name="coverage-report" path="coverage-report/index.html" />
            </tabs>
            <resources>

              <resource>vm97</resource>
            </resources>
            <artifacts>
              <test src="build/test-report" />
              <artifact src="dist/smtp-common.jar" />
              <artifact src="build/coverage-report" />
            </artifacts>
          </job>

        </jobs>
      </stage>
    </pipeline>
    <pipeline name="RPM-AIS">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="AIS" stageName="FunctionalTest" />
      </materials>
      <stage name="BuildRPMs">

        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <fetchartifact pipeline="AIS" stage="FunctionalTest" job="RunFunctionalTest" srcfile="ais.jar" dest="source" />
              <fetchartifact pipeline="AIS" stage="FunctionalTest" job="RunFunctionalTest" srcdir="lib" dest="source" />
              <fetchartifact pipeline="AIS" stage="FunctionalTest" job="RunFunctionalTest" srcfile="sv_release.txt" dest="source" />
              <fetchartifact pipeline="AIS" stage="FunctionalTest" job="RunFunctionalTest" srcdir="etc" dest="source" />
              <fetchartifact pipeline="AIS" stage="FunctionalTest" job="RunFunctionalTest" srcdir="scripts" dest="source" />
              <fetchartifact pipeline="AIS" stage="FunctionalTest" job="RunFunctionalTest" srcdir="\.svn" dest="source" />

              <fetchartifact pipeline="AIS" stage="FunctionalTest" job="RunFunctionalTest" srcdir="daemontools" dest="source" />
              <exec command="/home/builder/tools/specs/build.sh" args=" clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-ais" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-ais-etc" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-ais-daemontools" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-ais-scripts" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="AutoDeployment">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToVm22">

            <tasks>
              <exec command="/usr/bin/perl" args="/home/builder/tmp/ad/autodeployer.pl vm22 ais" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>

      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>

          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-AIS" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo " workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="AutoBetaDeployment">
        <approval type="manual">

          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="Beta">
            <tasks>
              <exec command="/usr/bin/perl" args="/home/builder/tmp/ad/autodeployer.pl bmarais01 ais" workingdir="source" />

            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>

    <pipeline name="AIS-Smtp-Sender-Simulator">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/ais/trunk/smtp-sender-simulator" username="java-builder" password="*******" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="CompileUnitTest">
            <tasks>

              <exec command="bash" args="go.sh ivy-retrieve" />
              <exec command="bash" args="go.sh test-coverage-reports" />
              <exec command="bash" args="go.sh jar" />
            </tasks>
            <tabs>
              <tab name="test-report" path="test-report/index.html" />
              <tab name="coverage-report" path="coverage-report/index.html" />
            </tabs>
            <resources>

              <resource>vm97</resource>
            </resources>
            <artifacts>
              <test src="build/test-report" />
              <artifact src="dist/smtp-sender-simulator.jar" />
              <artifact src="build/coverage-report" />
            </artifacts>
          </job>

        </jobs>
      </stage>
    </pipeline>
    <pipeline name="AIS-Smtp-Sender">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/ais/trunk/smtp-sender" username="java-builder" password="*******" dest="smtp-sender" />
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/ais/trunk/smtp-sender-functional-test" username="java-builder" password="*******" dest="smtp-sender-functional-test" />
      </materials>

      <stage name="CompileUnitTest">
        <jobs>
          <job name="BuildAndTest">
            <tasks>
              <exec command="bash" args="go.sh clean" workingdir="smtp-sender" />
              <exec command="bash" args="go.sh ivy-retrieve" workingdir="smtp-sender" />
              <exec command="bash" args="go.sh test-coverage-reports" workingdir="smtp-sender" />
              <exec command="bash" args="go.sh jar" workingdir="smtp-sender" />
            </tasks>

            <tabs>
              <tab name="test-report" path="CompileUnitTest-test-reports/test-report/index.html" />
              <tab name="coverage-report" path="CompileUnitTest-coverage-reports/coverage-report/index.html" />
            </tabs>
            <resources>
              <resource>vm97</resource>
            </resources>
            <artifacts>

              <artifact src="smtp-sender/dist/smtp-sender-1.0-SNAPSHOT.jar" dest="smtp-sender-artifacts" />
              <test src="smtp-sender/build/test-report" dest="CompileUnitTest-test-reports" />
              <artifact src="smtp-sender/build/coverage-report" dest="CompileUnitTest-coverage-reports" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="FunctionalTest">
        <jobs>

          <job name="FunctionalTest">
            <tasks>
              <exec command="bash" args="go.sh clean" workingdir="smtp-sender-functional-test" />
              <exec command="bash" args="go.sh ivy-retrieve" workingdir="smtp-sender-functional-test" />
              <fetchartifact pipeline="AIS-Smtp-Sender" stage="CompileUnitTest" job="BuildAndTest" srcfile="smtp-sender-artifacts/smtp-sender-1.0-SNAPSHOT.jar" dest="smtp-sender-functional-test/lib" />
              <exec command="bash" args="go.sh test-coverage-reports" workingdir="smtp-sender-functional-test" />
              <exec command="bash" args="go.sh jar" workingdir="smtp-sender-functional-test" />
            </tasks>
            <tabs>

              <tab name="test-report" path="FunctionalTest-test-reports/test-report/index.html" />
              <tab name="coverage-report" path="FunctionalTest-coverage-reports/coverage-report/index.html" />
            </tabs>
            <resources>
              <resource>vm28</resource>
            </resources>
            <artifacts>
              <test src="smtp-sender-functional-test/build/test-report" dest="FunctionalTest-test-reports" />

              <artifact src="smtp-sender-functional-test/build/coverage-report" dest="FunctionalTest-coverage-reports" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="AIS-Smtp-Server-Simulator">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>

        <svn url="https://svn.someone.lan/svn/ServiceDelivery/ais/trunk/smtp-server-simulator" username="java-builder" password="*******" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="CompileUnitTest">
            <tasks>
              <exec command="bash" args="go.sh ivy-retrieve" />
              <exec command="bash" args="go.sh test-coverage-reports" />
              <exec command="bash" args="go.sh jar" />

            </tasks>
            <tabs>
              <tab name="test-report" path="test-report/index.html" />
              <tab name="coverage-report" path="coverage-report/index.html" />
            </tabs>
            <resources>
              <resource>vm97</resource>
            </resources>

            <artifacts>
              <artifact src="dist/smtp-server-simulator.jar" />
              <test src="build/test-report" />
              <artifact src="build/coverage-report" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>

    <pipeline name="AIS-Smtp-Server">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/ais/trunk/smtp-server" username="java-builder" password="*******" dest="smtp-server" />
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/ais/trunk/smtp-server-functional-test" username="java-builder" password="*******" dest="smtp-server-functional-test" />
      </materials>
      <stage name="CompileUnitTest">
        <jobs>
          <job name="BuildAndTest">

            <tasks>
              <exec command="bash" args="go.sh clean" workingdir="smtp-server" />
              <exec command="bash" args="go.sh ivy-retrieve" workingdir="smtp-server" />
              <exec command="bash" args="go.sh test-coverage-reports" workingdir="smtp-server" />
              <exec command="bash" args="go.sh jar" workingdir="smtp-server" />
            </tasks>
            <tabs>
              <tab name="test-report" path="CompileUnitTest-test-reports/test-report/index.html" />
              <tab name="coverage-report" path="CompileUnitTest-coverage-reports/coverage-report/index.html" />

            </tabs>
            <resources>
              <resource>vm97</resource>
            </resources>
            <artifacts>
              <artifact src="smtp-server/dist/smtp-server-1.0-SNAPSHOT.jar" dest="smtp-server-artifacts" />
              <test src="smtp-server/build/test-report" dest="CompileUnitTest-test-reports" />
              <artifact src="smtp-server/build/coverage-report" dest="CompileUnitTest-coverage-reports" />

            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="FunctionalTest">
        <jobs>
          <job name="FunctionalTest">
            <tasks>
              <exec command="bash" args="go.sh clean" workingdir="smtp-server-functional-test" />

              <exec command="bash" args="go.sh ivy-retrieve" workingdir="smtp-server-functional-test" />
              <fetchartifact pipeline="AIS-Smtp-Server" stage="CompileUnitTest" job="BuildAndTest" srcfile="smtp-server-artifacts/smtp-server-1.0-SNAPSHOT.jar" dest="smtp-server-functional-test/lib" />
              <exec command="bash" args="go.sh test-coverage-reports" workingdir="smtp-server-functional-test" />
              <exec command="bash" args="go.sh jar" workingdir="smtp-server-functional-test" />
            </tasks>
            <tabs>
              <tab name="test-report" path="FunctionalTest-test-reports/test-report/index.html" />
              <tab name="coverage-report" path="FunctionalTest-coverage-reports/coverage-report/index.html" />
            </tabs>

            <resources>
              <resource>vm28</resource>
            </resources>
            <artifacts>
              <test src="smtp-server-functional-test/build/test-report" dest="FunctionalTest-test-reports" />
              <artifact src="smtp-server-functional-test/build/coverage-report" dest="FunctionalTest-coverage-reports" />
            </artifacts>
          </job>

        </jobs>
      </stage>
    </pipeline>
    <pipeline name="ATF">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/atf/trunk/atf" username="java-builder" password="*******" dest="atf" />
      </materials>
      <stage name="UnitTest">

        <jobs>
          <job name="CompileATFAndRunUnitTest">
            <tasks>
              <exec command="bash" args="go.sh clean" workingdir="atf" />
              <exec command="bash" args="go.sh ivy-retrieve" workingdir="atf" />
              <exec command="bash" args="go.sh jar" workingdir="atf" />
              <exec command="bash" args="go.sh test-coverage-reports" workingdir="atf" />
            </tasks>
            <tabs>

              <tab name="test-report" path="test-report/index.html" />
              <tab name="coverage-report" path="coverage-report/index.html" />
              <tab name="checkstyle" path="checkstyle/checkstyle_report.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>

              <artifact src="atf/dist/atf.jar" />
              <artifact src="atf/dist/lib/*.jar" dest="lib" />
              <artifact src="atf/etc" />
              <artifact src="atf/resources" />
              <artifact src="atf/build/coverage-report" />
              <artifact src="atf/build/checkstyle" />
              <test src="atf/build/test-report" />
            </artifacts>
          </job>

        </jobs>
      </stage>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <fetchartifact pipeline="ATF" stage="UnitTest" job="CompileATFAndRunUnitTest" srcfile="atf.jar" dest="atf" />
              <fetchartifact pipeline="ATF" stage="UnitTest" job="CompileATFAndRunUnitTest" srcdir="lib" dest="atf" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh clean" workingdir="atf" />

              <exec command="bash" args="/home/builder/tools/specs/build.sh build sv-java-atf" workingdir="atf" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh build sv-java-atf-lib" workingdir="atf" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh build sv-java-atf-etc" workingdir="atf" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh createdevrepo" workingdir="atf" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="atf" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="AutoDeployment">
        <approval type="manual">
          <authorization>

            <role>atf</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToVm49">
            <tasks>
              <exec command="/usr/bin/perl" args="/home/builder/tools/autodeployer/autodeployer.pl vm49 atf" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">

          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="ATF" stage="BuildRPMs" job="BuildRPMs" srcdir="atf/target/rpm" />

              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo " workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="rpm" />

            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="MSF">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/MSF/trunk" username="java-builder" password="*******" />

      </materials>
      <stage name="Build">
        <jobs>
          <job name="compile">
            <tasks>
              <exec command="c:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\msbuild.exe" args="msf.build /target:BuildCode" workingdir="MSF" />
            </tasks>
            <resources>
              <resource>dmarbld01</resource>

            </resources>
            <artifacts>
              <artifact src="bin" dest="Compiled" />
              <artifact src="PrecompiledWeb" dest="Compiled" />
              <artifact src="sv_release.txt" dest="Compiled" />
              <artifact src=".svn" dest="Compiled" />
              <artifact src="MSF/WebContainer/etc" />
            </artifacts>
          </job>

        </jobs>
      </stage>
      <stage name="UnitTest">
        <jobs>
          <job name="UnitTest">
            <tasks>
              <exec command="/bin/rm" args="-fr Compiled" />
              <fetchartifact pipeline="MSF" stage="Build" job="compile" srcdir="Compiled" />
              <exec command="/bin/bash" args="MSF/runUnitTests.sh" />

            </tasks>
            <resources>
              <resource>mono</resource>
            </resources>
            <artifacts>
              <artifact src="Compiled" />
              <artifact src="UnitTest" />
            </artifacts>

          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="SMSSenders">
    <pipeline name="RPM-SMSSender">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>

        <pipeline pipelineName="SMSSender-TRUNK" stageName="Build" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <fetchartifact pipeline="SMSSender-TRUNK" stage="Build" job="Compile" srcfile="java_sms_sender.jar" dest="source" />
              <fetchartifact pipeline="SMSSender-TRUNK" stage="Build" job="Compile" srcfile="sv_release.txt" dest="source" />
              <fetchartifact pipeline="SMSSender-TRUNK" stage="Build" job="Compile" srcdir="\.svn" dest="source" />

              <exec command="/home/builder/tools/specs/build.sh" args=" clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args=" build sv-java-smssender" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args=" createdevrepo " workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>

              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>

          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-SMSSender" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh deploytobeta" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh createbetarepo" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="SMSSender-TRUNK">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/someone.smssender/trunk/" username="java-builder" password="*******">
          <filter>
            <ignore pattern="etc/**/*" />
          </filter>
        </svn>
      </materials>
      <stage name="Build">

        <jobs>
          <job name="Compile">
            <tasks>
              <exec command="mvn" args="-Dmaven.test.skip=true clean package" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>

            <artifacts>
              <artifact src="target/java_sms_sender.jar" />
              <artifact src="sv_release.txt" />
              <artifact src=".svn" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="UnitTest">

        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="UnitTest">
            <tasks>

              <exec command="mvn" args="clean package" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <artifact src="target/java_sms_sender.jar" />
              <artifact src="sv_release.txt" />

              <artifact src=".svn" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="SMSSender-CAN_RESPONSES">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>

        <svn url="https://svn.someone.lan/svn/ServiceDelivery/someone.smssender/branches/B_CAN_RESPONSES/" username="java-builder" password="*******">
          <filter>
            <ignore pattern="etc/**/*" />
          </filter>
        </svn>
      </materials>
      <stage name="Compile">
        <jobs>
          <job name="Compile">

            <tasks>
              <exec command="mvn" args="-Dmaven.test.skip=true clean package" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <artifact src="target/java_sms_sender.jar" />

              <artifact src="sv_release.txt" />
              <artifact src=".svn" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="UnitTest">
        <approval type="manual">
          <authorization>

            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="UnitTest">
            <tasks>
              <exec command="mvn" args="clean package" />
            </tasks>

            <resources>
              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <artifact src="target/java_sms_sender.jar" />
              <artifact src="sv_release.txt" />
              <artifact src=".svn" />
            </artifacts>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="SMSSender-CAN_RESPONSES-RPM">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="SMSSender-CAN_RESPONSES" stageName="Compile" />
      </materials>

      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <fetchartifact pipeline="SMSSender-CAN_RESPONSES" stage="Compile" job="Compile" srcfile="java_sms_sender.jar" dest="source" />
              <fetchartifact pipeline="SMSSender-CAN_RESPONSES" stage="Compile" job="Compile" srcfile="sv_release.txt" dest="source" />
              <fetchartifact pipeline="SMSSender-CAN_RESPONSES" stage="Compile" job="Compile" srcdir="\.svn" dest="source" />
              <exec command="/home/builder/tools/specs/build.sh" args=" clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args=" build sv-java-smssender" workingdir="source" />

              <exec command="/home/builder/tools/specs/build.sh" args=" createdevrepo " workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="SMSSender-BRANCH">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/someone.smssender/branches/B_CINBELL_2_6_2_33/" username="java-builder" password="*******">
          <filter>

            <ignore pattern="etc/**/*" />
          </filter>
        </svn>
      </materials>
      <stage name="Compile">
        <jobs>
          <job name="Compile">
            <tasks>
              <exec command="mvn" args="-Dmaven.test.skip=true clean package" />

            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <artifact src="target/java_sms_sender.jar" />
              <artifact src="sv_release.txt" />
              <artifact src=".svn" />

            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="UnitTest">
        <approval type="manual">
          <authorization>
            <role>beta</role>

          </authorization>
        </approval>
        <jobs>
          <job name="UnitTest">
            <tasks>
              <exec command="mvn" args="clean package" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <artifact src="target/java_sms_sender.jar" />
              <artifact src="sv_release.txt" />
              <artifact src=".svn" />
            </artifacts>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="SMSSender-BRANCH-RPM">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="SMSSender-BRANCH" stageName="Compile" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">

            <tasks>
              <fetchartifact pipeline="SMSSender-BRANCH" stage="Compile" job="Compile" srcfile="java_sms_sender.jar" dest="source" />
              <fetchartifact pipeline="SMSSender-BRANCH" stage="Compile" job="Compile" srcfile="sv_release.txt" dest="source" />
              <fetchartifact pipeline="SMSSender-BRANCH" stage="Compile" job="Compile" srcdir="\.svn" dest="source" />
              <exec command="/home/builder/tools/specs/build.sh" args=" clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args=" build sv-java-smssender" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args=" createdevrepo " workingdir="source" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="SMSSender-etc-CAN_RESPONSES">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/someone.smssender/branches/B_CAN_RESPONSES/etc/" username="java-builder" password="*******" dest="etc" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">

            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args=" clean" workingdir="etc" />
              <exec command="/home/builder/tools/specs/jsmsbuild.pl" workingdir="etc" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>

              <artifact src="etc/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="SMSSender-etc-DEV">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>

        <svn url="https://svn.someone.lan/svn/ServiceDelivery/someone.smssender/branches/B_CAN_RESPONSES/etc" username="java-builder" password="*******" dest="etc" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args=" clean" workingdir="etc" />
              <exec command="/home/builder/tools/specs/build.sh" args=" build sv-java-smssender-etc-rogers-1-localis" workingdir="etc" />
              <exec command="/home/builder/tools/specs/build.sh" args=" build sv-java-smssender-etc-rogers-1-matrix" workingdir="etc" />

              <exec command="/home/builder/tools/specs/build.sh" args=" build sv-java-smssender-etc-rogers-2-localis" workingdir="etc" />
              <exec command="/home/builder/tools/specs/build.sh" args=" build sv-java-smssender-etc-rogers-2-matrix" workingdir="etc" />
              <exec command="/home/builder/tools/specs/build.sh" args=" createdevrepo" workingdir="etc" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>

              <artifact src="etc/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>

          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="SMSSender-etc-DEV" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args=" deploytobeta" workingdir="etc" />
              <exec command="/home/builder/tools/specs/build.sh" args=" createbetarepo " workingdir="etc" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="etc/target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="SMSSender-etc-TRUNK">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/someone.smssender/trunk/etc/" username="java-builder" password="*******" dest="etc" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>

          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args=" clean" workingdir="etc" />
              <exec command="/home/builder/tools/specs/jsmsbuild.pl" workingdir="etc" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="etc/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>

            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="SMSSender-etc-TRUNK" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args=" deploytobeta" workingdir="etc" />

              <exec command="/home/builder/tools/specs/build.sh" args=" createbetarepo " workingdir="etc" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="etc/target/rpm" />
            </artifacts>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="SMSSender-etc-BRANCH">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/someone.smssender/branches/B_ROGERS_2_6_2_34/etc/" username="java-builder" password="*******" dest="etc" />
      </materials>

      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args=" clean" workingdir="etc" />
              <exec command="/home/builder/tools/specs/jsmsbuild.pl" workingdir="etc" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="etc/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>

  <pipelines group="Stats">
    <pipeline name="StatsServer">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/statsserver/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileUnitTest">
        <jobs>
          <job name="BuildAndTest">

            <tasks>
              <ant target="-Denvironment=build-server lib.clean-cache" />
              <ant target="-Denvironment=build-server create.artifacts" />
            </tasks>
            <tabs>
              <tab name="UnitTests" path="unit-test-report/output/index.html" />
            </tabs>
            <resources>
              <resource>cruise_java_build</resource>

            </resources>
            <artifacts>
              <artifact src="target/artifacts/stats-server.jar" />
              <artifact src="target/test/reports/output" dest="unit-test-report" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="FunctionalTest">

        <jobs>
          <job name="FunctionalTest">
            <tasks>
              <fetchartifact pipeline="StatsServer" stage="CompileUnitTest" job="BuildAndTest" srcfile="stats-server.jar" dest="cascade" />
              <ant target="-Denvironment=build-server functional-test" />
              <exec command="/home/builder/tools/specs/setrevision.sh" args=". tools/sv_release.txt" />
            </tasks>
            <tabs>
              <tab name="functional-test" path="target/functionaltest/reports/output/index.html" />

            </tabs>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/functionaltest/reports" dest="target/functionaltest/" />
              <artifact src="tools/sv_release.txt" />
              <artifact src="tools/stats-server.sh" />

              <artifact src="tools/stats-server" />
              <artifact src="cascade/stats-server.jar" />
              <artifact src="etc" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>

  <pipelines group="Testing">
    <pipeline name="fixture">
      <materials>
        <svn url="https://svn.someone.lan/svn/testing/trunk/fixture/" username="java-builder" password="*******" />
      </materials>
      <stage name="BuildAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>

              <exec command="./fixture-build.sh" />
              <exec command="/bin/bash" args="./fixture-cleanup-after-test.sh" />
            </tasks>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
            <artifacts>
              <test src="target/surefire-reports" />

              <artifact src="target/fixture-1.0-SNAPSHOT-jar-with-dependencies.jar" />
              <artifact src="sv_release.txt" />
              <artifact src=".svn" />
              <artifact src="src/main/fitnesse" dest="fitnesse-main" />
              <artifact src="src/test/resources" dest="fitnesse-resources" />
            </artifacts>
          </job>
        </jobs>
      </stage>

    </pipeline>
  </pipelines>
  <pipelines group="defaultGroup">
    <pipeline name="KolosTest">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="SMSSender-etc-DEV" stageName="BuildRPMs" />
      </materials>
      <stage name="Test">

        <jobs>
          <job name="Test">
            <tasks>
              <exec command="/home/builder/tools/test.sh" />
              <exec command="/home/builder/tools/test2.sh" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="LRM-Tool">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/lrm/trunk" username="java-builder" password="*******" dest="lrm" />

      </materials>
      <stage name="Testing">
        <jobs>
          <job name="raketest">
            <tasks>
              <exec command="/bin/ln" args="-fs ../etc/live/database.yml.testing config/database.yml" workingdir="lrm" />
              <rake buildfile="Rakefile" target="db:drop:all" workingdir="lrm" />
              <rake buildfile="Rakefile" target="db:create:all" workingdir="lrm" />
              <exec command="/usr/bin/env" args="RAILS_ENV=development rake db:migrate" workingdir="lrm" />

              <exec command="/usr/bin/env" args="RAILS_ENV=test rake db:migrate" workingdir="lrm" />
              <exec command="/bin/rm" args="-rf public/uploads" workingdir="lrm" />
              <exec command="/bin/mkdir" args="public/uploads" workingdir="lrm" />
              <rake buildfile="Rakefile" target="test" workingdir="lrm" />
              <exec command="/bin/rm" args="config/database.yml" workingdir="lrm" />
            </tasks>
            <resources>
              <resource>SLES11</resource>

              <resource>ruby</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="BuildRPM">
        <jobs>
          <job name="rpmbuild">

            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args=" clean" workingdir="lrm" />
              <exec command="/home/builder/tools/specs/build.sh" args=" build sv-lrmt" workingdir="lrm" />
              <exec command="/home/builder/tools/specs/build.sh" args=" createdevrepo" workingdir="lrm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="lrm/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetaRepo">
        <approval type="manual">
          <authorization>

            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="LRM-Tool" stage="BuildRPM" job="rpmbuild" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="lrm" />

              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="lrm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="noc-dashboard-common">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/NOCTools/someone.noc.dashboard.common" username="java-builder" password="*******" />
      </materials>
      <stage name="build">
        <jobs>
          <job name="compile-test-package">

            <tasks>
              <exec command="mvn" args="-Denvironment=build-server -e clean package surefire-report:report install" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <artifact src="target/someone.noc.dashboard.common-1.3-SNAPSHOT.jar" />

              <test src="target/surefire-reports" dest="unit-test-reports" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="deploy">
        <approval type="manual" />
        <jobs>
          <job name="deploy">

            <tasks>
              <exec command="mvn" args="-Denvironment=build-server -e deploy" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="Aldrin">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.aldrin/" username="java-builder" password="*******" dest="source" />
        <svn url="https://svn.someone.lan/svn/Releasing/specs" username="java-builder" password="*******" dest="tools/specs">
          <filter>
            <ignore pattern="**/*" />

          </filter>
        </svn>
      </materials>
      <stage name="Compile">
        <jobs>
          <job name="Compile">
            <tasks>
              <exec command="mvn" args="clean package" />
            </tasks>

            <resources>
              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <artifact src="target/aldrin-console.jar" />
            </artifacts>
          </job>
        </jobs>

      </stage>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <fetchartifact pipeline="Aldrin" stage="Compile" job="Compile" srcfile="aldrin-console.jar" dest="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-aldrin" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-aldrin-etc" workingdir="source" />

              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="jar-someone.common.audio">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/someone.common.audio/" username="java-builder" password="*******" />
      </materials>

      <stage name="CompileAndDeploy">
        <jobs>
          <job name="BuildAndDepoy">
            <tasks>
              <exec command="mvn" args="clean package deploy" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <artifact src="target/common_audio-0.0.1-SNAPSHOT.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="jar-someone.common.transport">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/someone.common.transport/" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileAndDeploy">
        <jobs>
          <job name="BuildAndDepoy">
            <tasks>
              <exec command="mvn" args="clean package deploy" />

            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <artifact src="target/someone.common.transport-0.0.1-SNAPSHOT-client.jar" />
              <artifact src="target/someone.common.transport-0.0.1-SNAPSHOT.jar" />
            </artifacts>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Make-the-Tea">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/tea" username="java-builder" password="*******" />
      </materials>

      <stage name="defaultStage">
        <approval type="manual" />
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="/bin/echo" args=" 'Please' | mail -s 'Make the Tea' ian@ruffell.net" />
            </tasks>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="StageTesting-Fitnesse">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/testing/trunk/RemoteFitnesseTestRunner" username="java-builder" password="*******" />
      </materials>
      <stage name="defaultStage">
        <jobs>

          <job name="defaultJob">
            <tasks>
              <ant buildfile="build.xml" target="-lib lib" />
            </tasks>
            <tabs>
              <tab name="FitnesseResults" path="target/TestResults.html" />
            </tabs>
            <resources>
              <resource>external_connectivity</resource>

            </resources>
            <artifacts>
              <artifact src="target" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="MIF-TenzingEndpointSpikes-Run">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <pipeline pipelineName="MIF-TenzingEndpointSpikes-Build" stageName="BuildAndPackage" />
        <svn url="https://svn.someone.lan/svn/MIF/TenzingEndpointSpikes" username="java-builder" password="*******" />
      </materials>
      <stage name="runPerformanceTest">
        <approval type="manual" />
        <jobs>
          <job name="coordinatePerformanceTest">

            <tasks>
              <ant buildfile="build.xml" target="purgeLocalReports" workingdir="TestJMSImplementations/runtime" />
              <exec command="/usr/bin/perl" args="runtest.pl cc-AMQ -DmsgCount=1000 -DconsumerCount=1 -Damq.fatjar=runtime/TestJMS-ActiveMQ520_fat.jar -Djbm.fatjar=runtime/TestJMS-JBossMessaging_fat.jar -Djoram.fatjar=runtime/TestJMS-Joram_fat.jar -Dpojo.fatjar=runtime/TestJMS-Pojo_fat.jar -Drmq.fatjar=runtime/TestJMS-RabbitMQ_fat.jar -Dsjsmq.fatjar=runtime/TestJMS-SJSMQ_fat.jar -Dtibems.fatjar=runtime/TestJMS-TibcoRdV_fat.jar -Dwmq.fatjar=runtime/TestJMS-WebsphereMQ_fat.jar" workingdir="TestJMSImplementations/runtime" />
            </tasks>
            <resources>
              <resource>performance</resource>
            </resources>
          </job>

        </jobs>
      </stage>
      <stage name="retrieveTestData">
        <jobs>
          <job name="getTestData">
            <tasks>
              <ant buildfile="build.xml" target="-Damq.fatjar=TestJMS-ActiveMQ520_fat.jar -Dtoserver=amardev01 -Dremote.user=java-builder -Dremote.user.pw=******* -Dremote.runtime.path=testjms/reports/sendback/* collecttestdata" workingdir="TestJMSImplementations/runtime" />
              <ant buildfile="build.xml" target="-Damq.fatjar=TestJMS-ActiveMQ520_fat.jar -Dtoserver=amardev02 -Dremote.user=java-builder -Dremote.user.pw=******* -Dremote.runtime.path=testjms/reports/sendback/* collecttestdata" workingdir="TestJMSImplementations/runtime" />
              <ant buildfile="build.xml" target="-Damq.fatjar=TestJMS-ActiveMQ520_fat.jar -Dtoserver=amardev03 -Dremote.user=java-builder -Dremote.user.pw=******* -Dremote.runtime.path=testjms/reports/sendback/* collecttestdata" workingdir="TestJMSImplementations/runtime" />

              <ant buildfile="build.xml" target="-Damq.fatjar=TestJMS-ActiveMQ520_fat.jar -Dtoserver=amardb01 -Dremote.user=java-builder -Dremote.user.pw=******* -Dremote.runtime.path=testjms/reports/sendback/* collecttestdata" workingdir="TestJMSImplementations/runtime" />
            </tasks>
            <resources>
              <resource>performance</resource>
            </resources>
          </job>
        </jobs>
      </stage>

      <stage name="Test_Reports">
        <jobs>
          <job name="publish">
            <tasks>
              <fetchartifact pipeline="MIF-TenzingEndpointSpikes-Build" stage="BuildAndPackage" job="BuildTestSuitesAndPackageAsFatJars" srcfile="TestJMS-ActiveMQ520-0.0.1-SNAPSHOT-jar-with-dependencies.jar" dest="TestJMSImplementations" />
              <ant buildfile="build.xml" target="-Damq.fatjar=TestJMS-ActiveMQ520-0.0.1-SNAPSHOT-jar-with-dependencies.jar generateAndPublishReports" workingdir="TestJMSImplementations/runtime" />
            </tasks>
            <tabs>
              <tab name="Test_Report" path="TestReport/report.html" />

            </tabs>
            <resources>
              <resource>performance</resource>
            </resources>
            <artifacts>
              <artifact src="TestJMSImplementations/images" dest="TestReport" />
              <artifact src="TestJMSImplementations/reports" dest="TestReport" />
              <artifact src="TestJMSImplementations/runtime/report.html" dest="TestReport" />

            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="MIF-TenzingEndpointSpikes-Build">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/MIF/TenzingEndpointSpikes" username="java-builder" password="*******">

          <filter>
            <ignore pattern="build.xml" />
            <ignore pattern="build.properties" />
          </filter>
        </svn>
      </materials>
      <stage name="BuildAndPackage">
        <jobs>
          <job name="BuildTestSuitesAndPackageAsFatJars">

            <tasks>
              <exec command="mvn" args="'-DMVN_OPTS=-XX:MaxPermSize=1024m -Xmx2048m -Xms1024m' clean package install" />
            </tasks>
            <resources>
              <resource>performance</resource>
            </resources>
            <artifacts>
              <artifact src="TestJMS-ActiveMQ520/target/TestJMS-ActiveMQ520-0.0.1-SNAPSHOT-jar-with-dependencies.jar" />

              <artifact src="TestJMS-Pojo/target/TestJMS-Pojo-0.0.1-SNAPSHOT-jar-with-dependencies.jar" />
              <artifact src="TestJMS-RabbitMQ/target/TestJMS-RabbitMQ-0.0.1-SNAPSHOT-jar-with-dependencies.jar" />
              <artifact src="TestJMS-TibcoRdV/target/TestJMS-TibcoRdV-0.0.1-SNAPSHOT-jar-with-dependencies.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="GetFatJars">
        <jobs>

          <job name="fetchFatJars">
            <tasks>
              <fetchartifact pipeline="MIF-TenzingEndpointSpikes-Build" stage="BuildAndPackage" job="BuildTestSuitesAndPackageAsFatJars" srcfile="TestJMS-ActiveMQ520-0.0.1-SNAPSHOT-jar-with-dependencies.jar" dest="testjms/runtime/TestJMS-ActiveMQ520_fat.jar" />
              <fetchartifact pipeline="MIF-TenzingEndpointSpikes-Build" stage="BuildAndPackage" job="BuildTestSuitesAndPackageAsFatJars" srcfile="TestJMS-Pojo-0.0.1-SNAPSHOT-jar-with-dependencies.jar" dest="testjms/runtime/TestJMS-Pojo_fat.jar" />
              <fetchartifact pipeline="MIF-TenzingEndpointSpikes-Build" stage="BuildAndPackage" job="BuildTestSuitesAndPackageAsFatJars" srcfile="TestJMS-RabbitMQ-0.0.1-SNAPSHOT-jar-with-dependencies.jar" dest="testjms/runtime/TestJMS-RabbitMQ_fat.jar" />
              <fetchartifact pipeline="MIF-TenzingEndpointSpikes-Build" stage="BuildAndPackage" job="BuildTestSuitesAndPackageAsFatJars" srcfile="TestJMS-TibcoRdV-0.0.1-SNAPSHOT-jar-with-dependencies.jar" dest="testjms/runtime/TestJMS-TibcoRdV_fat.jar" />
            </tasks>
            <resources>
              <resource>performance</resource>

            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="deployConfigurationsToTestHardware">
        <jobs>
          <job name="deployToTestHardware">
            <tasks>
              <ant buildfile="TestJMSImplementations/runtime/build.xml" target="-Dtoserver=amardev01 -Dremote.user=java-builder -Dremote.user.pw=******* -Dremote.runtime.path=testjms/runtime selfdeploy" />

              <ant buildfile="TestJMSImplementations/runtime/build.xml" target="-Dtoserver=amardev02 -Dremote.user=java-builder -Dremote.user.pw=******* -Dremote.runtime.path=testjms/runtime selfdeploy" />
              <ant buildfile="TestJMSImplementations/runtime/build.xml" target="-Dtoserver=amardev03 -Dremote.user=java-builder -Dremote.user.pw=******* -Dremote.runtime.path=testjms/runtime selfdeploy" />
              <ant buildfile="TestJMSImplementations/runtime/build.xml" target="-Dtoserver=amardb01 -Dremote.user=java-builder -Dremote.user.pw=******* -Dremote.runtime.path=testjms/runtime selfdeploy" />
            </tasks>
            <resources>
              <resource>performance</resource>
            </resources>
          </job>

        </jobs>
      </stage>
    </pipeline>
    <pipeline name="MSFEndpoint">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/MIF/MSF%20Endpoint/msfendpoint/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileUnitTestMSFEndpoint">

        <jobs>
          <job name="CompileUnitTestMSFEndpoint">
            <tasks>
              <exec command="mvn" args="-Denvironment=build-server -e clean package surefire-report:report" />
              <exec command="/home/builder/tools/specs/setrevision.sh" args=" . tools/sv_release.txt" workingdir="msfendpointear" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <artifact src="supervisor/target/msfendpoint.supervisor.war" />
              <artifact src="msfendpointear/target/msfendpointear.ear" />
              <artifact src="msfendpointjar/etc/dev/msfendpoint/msfendpoint.xml" />
              <artifact src="msfendpointjar/etc" />
              <artifact src="msfendpointear/tools" />
              <artifact src="msfendpointear/tools/sv_release.txt" />
              <test src="msfendpointjar/target/surefire-reports" dest="unit-test-reports" />

            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployMSFEndpointToArtifactory">
        <approval type="manual" />
        <jobs>
          <job name="DeployMSFEndpointToArtifactory">
            <tasks>

              <exec command="mvn" args="-Denvironment=build-server -e clean deploy surefire-report:report" />
              <exec command="bash" args="tools/specs/setrevision.sh . tools/sv_release.txt" workingdir="msfendpointear" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <artifact src="supervisor/target/msfendpoint.supervisor.war" />

              <artifact src="msfendpointear/target/msfendpointear.ear" />
              <artifact src="msfendpointjar/etc/dev/msfendpoint/msfendpoint.xml" />
              <artifact src="msfendpointjar/etc" />
              <artifact src="msfendpointear/tools" />
              <artifact src="msfendpointear/tools/sv_release.txt" />
              <test src="msfendpointjar/target/surefire-reports" dest="unit-test-reports" />
            </artifacts>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="IntegrationTests-Fitnesse">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/testing/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="defaultStage">
        <jobs>

          <job name="defaultJob">
            <tasks>
              <exec command="bash" args="run_tests.sh" />
            </tasks>
            <tabs>
              <tab name="FitnesseResults" path="target/TestResults.html" />
            </tabs>
            <resources>
              <resource>external_connectivity</resource>

            </resources>
            <artifacts>
              <artifact src="target" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="CurrentGenAlerting">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.currentgenalerting/trunk" username="java-builder" password="*******" dest="source" />
        <svn url="https://svn.someone.lan/svn/Releasing/specs" username="java-builder" password="*******" dest="tools/specs">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </svn>
      </materials>

      <stage name="buildStage">
        <jobs>
          <job name="buildJob">
            <tasks>
              <ant workingdir="source" />
            </tasks>
            <resources>
              <resource>SUSE</resource>

              <resource>not_running_nrpe</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/lib" />
              <artifact src="source/target/currentgenalerting.zip" />
              <artifact src="source/target/currentgenalerting-util.zip" />
              <artifact src="source/target/alerting-jmeter.zip" />
              <test src="source/target/test-reports" />

            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="RPMBuildDev">
        <jobs>
          <job name="RPMBuild">
            <tasks>
              <fetchartifact pipeline="CurrentGenAlerting" stage="buildStage" job="buildJob" srcdir="lib" dest="source" />

              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-orac" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-orac-etc-dev" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-orac-etc-beta" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-orac-etc-localis" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-orac-etc-matrix" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-orac-etc-stage" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-orac-daemontools" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />

            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>

        </jobs>
      </stage>
      <stage name="RPM2BetaRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>

        <jobs>
          <job name="RPMBuildAndMove">
            <tasks>
              <fetchartifact pipeline="CurrentGenAlerting" stage="RPMBuildDev" job="RPMBuild" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="rpm" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="JMeter">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/JavaBuildTools/jmeter/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="BuildStage">
        <jobs>
          <job name="build">
            <tasks>
              <ant buildfile="build.xml" target="install createDistribution" />

            </tasks>
            <resources>
              <resource>build</resource>
              <resource>vm28</resource>
            </resources>
            <artifacts>
              <artifact src="dist/jmeter-someone-distribution.zip" />
            </artifacts>

          </job>
        </jobs>
      </stage>
      <stage name="BuildRPM">
        <jobs>
          <job name="rpm">
            <tasks>
              <exec command="bash" args="tools/rpm/clean_target.sh" />
              <exec command="bash" args="tools/rpm/build_rpm.sh sv-java-jmeter dev_rpm_repo DEV" />

            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target" />
            </artifacts>
          </job>

        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Common_UtilsV1">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.common/someone.common.java/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileUnitTestAndIntegrationTestStage">

        <jobs>
          <job name="CompileUnitTestAndIntegrationTestJob">
            <tasks>
              <exec command="mvn" args="clean install deploy" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>

            <artifacts>
              <artifact src="target/common-*.jar" />
              <test src="target/surefire-reports" dest="unit-test-reports" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>

  <pipelines group="StorageManager">
    <pipeline name="Storage_Manager_Nightly_Performance_Tests">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.storagemanager/trunk/storagemanager-performancetest" username="java-builder" password="*******" />
        <pipeline pipelineName="Storage_Manager" stageName="CompileUnitTestAndIntegrationTestStage" />
      </materials>
      <stage name="NightlyPerformanceTestStage">
        <jobs>

          <job name="Escalating">
            <tasks>
              <fetchartifact pipeline="Storage_Manager" stage="CompileUnitTestAndIntegrationTestStage" job="Linux_BuildAndTest" srcfile="storagemanager.war" dest="storagemanager-performancetest/fetched_artifacts" />
              <exec command="bash" args="go.sh -Denvironment=build-server -Drun.type=escalate" timeout="4200" />
            </tasks>
            <tabs>
              <tab name="Histogram" path="jmeter-output/escalate9-histogram.png" />
              <tab name="Scatter" path="jmeter-output/escalate9-scatterplot.png" />
            </tabs>

            <resources>
              <resource>performance</resource>
            </resources>
            <artifacts>
              <artifact src="storagemanager-performancetest/target/jmeter-output" />
              <artifact src="storagemanager-performancetest/target/profile-log.csv" />
            </artifacts>
          </job>

        </jobs>
      </stage>
    </pipeline>
    <pipeline name="StorageManager_ClientAPI">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.storagemanager-client/trunk" username="java-builder" password="*******" />
      </materials>
      <stage name="Perl_Compile">

        <jobs>
          <job name="Compile">
            <tasks>
              <exec command="perl" args="Makefile.PL" workingdir="perl-api" />
            </tasks>
            <resources>
              <resource>build</resource>
            </resources>

          </job>
        </jobs>
      </stage>
      <stage name="Perl_UnitTest">
        <jobs>
          <job name="UnitTest">
            <tasks>
              <exec command="make" args="clean test" workingdir="perl-api" />
            </tasks>

            <resources>
              <resource>build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="StorageManagerMuninPlugins">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.storagemanager/trunk/storagemanager-monitoring" username="java-builder" password="*******" />
      </materials>
      <stage name="BuildRPM">
        <jobs>
          <job name="BuildRPM">
            <tasks>
              <exec command="bash" args="tools/rpm/clean_target.sh" />

              <exec command="bash" args="tools/rpm/build_rpm.sh sv-ops-storagemanager-munin-plugins DEV" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>

          </job>
        </jobs>
      </stage>
      <stage name="BuildAndReleaseRPMToBeta">
        <jobs>
          <job name="BuildRPM">
            <tasks>
              <exec command="bash" args="tools/rpm/clean_target.sh" />
              <exec command="bash" args="tools/rpm/build_rpm.sh sv-ops-storagemanager-munin-plugins BETA" />

              <exec command="bash" args="tools/rpm/install_rpms_in_repo.sh" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="StorageManagerUtil">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.storagemanager/trunk/storagemanager-util" username="java-builder" password="*******" />
      </materials>

      <stage name="CompileUnitTestStorageManagerUtil">
        <jobs>
          <job name="Suse_Build">
            <tasks>
              <exec command="mvn" args="clean package" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>

            </resources>
            <artifacts>
              <artifact src="target/storagemanager-util.jar" />
              <artifact src="target/smcp.sh" />
              <artifact src="target/smcp.bat" />
              <artifact src="target/smex.sh" />
              <artifact src="target/smex.bat" />
              <test src="target/surefire-reports" dest="unit-test-reports" />
            </artifacts>

          </job>
        </jobs>
      </stage>
      <stage name="BuildRPM">
        <jobs>
          <job name="BuildRPM">
            <tasks>
              <fetchartifact pipeline="StorageManagerUtil" stage="CompileUnitTestStorageManagerUtil" job="Suse_Build" srcfile="storagemanager-util.jar" />
              <exec command="bash" args="tools/specs/build.sh clean" />

              <exec command="bash" args="tools/specs/build.sh build sv-java-storagemanager-utility" />
              <exec command="bash" args="tools/specs/build.sh createdevrepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />

            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="moveRPMToBetaRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>

          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <exec command="bash" args="tools/specs/build.sh deploytobeta" />
              <exec command="bash" args="tools/specs/build.sh createbetarepo " />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Storage_Manager">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />

      <materials>
        <svn url="https://svn.someone.lan/svn/someone.storagemanager/trunk/" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileUnitTestAndIntegrationTestStage">
        <jobs>
          <job name="Linux_BuildAndTest">
            <tasks>
              <exec command="mvn" args="clean integration-test -P build-server" workingdir="storagemanager-war" />
            </tasks>

            <resources>
              <resource>working_mvn</resource>
            </resources>
            <artifacts>
              <artifact src="storagemanager-war/target/storagemanager.war" />
              <artifact src="storagemanager-war/target/clean_StorageManager.sh" />
              <test src="storagemanager-war/target/surefire-reports" dest="unit-test-reports" />
            </artifacts>

          </job>
        </jobs>
      </stage>
      <stage name="FunctionalTestStage">
        <jobs>
          <job name="FunctionalTests">
            <tasks>
              <fetchartifact pipeline="Storage_Manager" stage="CompileUnitTestAndIntegrationTestStage" job="Linux_BuildAndTest" srcfile="storagemanager.war" dest="storagemanager-functionaltest/fetched_artifacts" />
              <fetchartifact pipeline="Storage_Manager" stage="CompileUnitTestAndIntegrationTestStage" job="Linux_BuildAndTest" srcfile="clean_StorageManager.sh" dest="storagemanager-functionaltest/fetched_artifacts" />

              <exec command="bash" args="go.sh lib.clean-cache" workingdir="storagemanager-functionaltest" />
              <exec command="bash" args="go.sh -Denvironment=build-server build" workingdir="storagemanager-functionaltest" />
            </tasks>
            <tabs>
              <tab name="FunctionalTests" path="test-reports/output/index.html" />
            </tabs>
            <resources>
              <resource>vm97</resource>

            </resources>
            <artifacts>
              <artifact src="storagemanager-functionaltest/target/qa" dest="qa" />
              <artifact src="storagemanager-functionaltest/target/test-reports/output" dest="test-reports" />
              <test src="storagemanager-functionaltest/target/test-reports/TESTS-TestSuites.xml" dest="test-results.xml" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="BuildRPM">
        <jobs>
          <job name="BuildRPM">
            <tasks>
              <fetchartifact pipeline="Storage_Manager" stage="CompileUnitTestAndIntegrationTestStage" job="Linux_BuildAndTest" srcfile="storagemanager.war" dest="storagemanager-war/target" />
              <exec command="bash" args="tools/specs/build.sh clean" workingdir="storagemanager-war" />
              <exec command="bash" args="tools/specs/build.sh build sv-java-storagemanager" workingdir="storagemanager-war" />
              <exec command="bash" args="tools/specs/build.sh build sv-java-storagemanager-etc" workingdir="storagemanager-war" />
              <exec command="bash" args="tools/specs/build.sh createdevrepo" workingdir="storagemanager-war" />

            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="storagemanager-war/target/rpm" />
            </artifacts>
          </job>

        </jobs>
      </stage>
      <stage name="PerformanceTestStage">
        <jobs>
          <job name="SanityTests">
            <tasks>
              <fetchartifact pipeline="Storage_Manager" stage="CompileUnitTestAndIntegrationTestStage" job="Linux_BuildAndTest" srcfile="storagemanager.war" dest="storagemanager-performancetest/fetched_artifacts" />
              <exec command="bash" args="go.sh lib.clean-cache" workingdir="storagemanager-performancetest" timeout="300" />
              <exec command="bash" args="go.sh -Denvironment=build-server -Drun.type=sanity" workingdir="storagemanager-performancetest" timeout="300" />

            </tasks>
            <tabs>
              <tab name="SanityIndexPage" path="jmeter-output/sanity-index.html" />
            </tabs>
            <resources>
              <resource>performance</resource>
            </resources>
            <artifacts>

              <artifact src="storagemanager-performancetest/target/jmeter-output" />
              <test src="storagemanager-performancetest/target/test-reports" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="moveRpmsIntoBetaRepo">
        <approval type="manual">
          <authorization>

            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="moveRpms">
            <tasks>
              <exec command="bash" args="tools/specs/build.sh deploytobeta" workingdir="storagemanager-war" />
              <exec command="bash" args="tools/specs/build.sh createbetarepo" workingdir="storagemanager-war" />

            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>

  </pipelines>
  <pipelines group="UPF">
    <pipeline name="UPF1">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.upf/trunk" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="CompileUnitTest">
        <jobs>

          <job name="Compile">
            <tasks>
              <exec command="/home/builder/tools/specs/setrevision.sh" args=". sv_release.txt" workingdir="source" />
              <exec command="mvn" args="clean package" workingdir="source" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>

            <artifacts>
              <artifact src="source/upf-ear/target/someone.upf.ear" />
              <artifact src="source/sv_release.txt" />
              <artifact src="source/etc" />
              <test src="source/upf-ejb/target/surefire-reports" />
            </artifacts>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="UPF-Branch">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.upf/branches/B_2_6_1_28" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="CompileUnitTest">
        <jobs>
          <job name="Compile">

            <tasks>
              <exec command="/home/builder/tools/specs/setrevision.sh" args=". sv_release.txt" workingdir="source" />
              <exec command="mvn" args="clean package" workingdir="source" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>
            <artifacts>

              <artifact src="source/upf-ear/target/someone.upf.ear" />
              <artifact src="source/sv_release.txt" />
              <artifact src="source/etc" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="UPF1-Integration-Tests">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/someone.upf/trunk" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="Compile-Deploy">
        <jobs>
          <job name="Compile-Deploy">
            <tasks>
              <exec command="mvn" args="'-DMAVEN_OPTS=-Xmx512m' -Dupf.db.url=jdbc:informix-sqli://dmardb01.someone.lan:30003/someupf_vm27:informixserver=net_someone_dev2 -Dupf.db.user=someone -Dupf.db.password=******* -Dremote.hostName=vm27.someone.lan -Dremote.userName=java-builder -Dremote.password=******* -Dremote.jbossHome=/opt/someone/jboss -Dremote.deployPath=server/default/deploy -Dremote.jbossStartCommand='sudo /etc/init.d/jboss start' -Dremote.jbossStopCommand='killall java' -Dremote.serverUpRetries=40 -Dremote.appServerTimeout=150000 -Dremote.appServerStopPauseLength=15000 -Dremote.rmiport=1099 -Pdeploy-vm27,all-tests,coverage clean deploy" workingdir="source" />

            </tasks>
            <tabs>
              <tab name="test-report" path="test-report/surefire-reports/index.html" />
            </tabs>
            <resources>
              <resource>working_mvn</resource>
            </resources>
            <artifacts>

              <artifact src="source/upf-ear/target/someone.upf.ear" />
              <test src="source/apps/deploy-vm27/target/surefire-reports" dest="test-report" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="WebBasedProjects">

    <pipeline name="Bonnington-stub">
      <materials>
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/someone.bonnington.stub/" username="java-builder" password="*******" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="mvn" args="-U -e clean package deploy" />

            </tasks>
            <resources>
              <resource>cruise_java_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToArtifactory">

        <jobs>
          <job name="Deploy">
            <tasks>
              <exec command="mvn" args="'-DMVN_OPTS=-XX:MaxPermSize=256m -Xmx1024m -Xms512m -DskipTests' deploy" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>

            <artifacts>
              <artifact src="target/*.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Bonnington-common">
      <materials>

        <svn url="https://svn.someone.lan/svn/ServiceDelivery/someone.bonnington.common/" username="java-builder" password="*******" />
      </materials>
      <stage name="CompileAndUnitTest">
        <jobs>
          <job name="CompileAndUnitTest">
            <tasks>
              <exec command="mvn" args="-U -e clean package deploy" />
            </tasks>
            <resources>

              <resource>cruise_java_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="www.someone.com-etc-drupal">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />

      <materials>
        <svn url="https://svn.someone.lan/svn/Websites/www.someone.com/trunk/etc" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="BuildRpm">
        <jobs>
          <job name="DefaultBuild">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-www-someone-com-etc-drupal" workingdir="source" />

              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>

          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>

        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="www.someone.com-etc-drupal" stage="BuildRpm" job="DefaultBuild" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="www.someone.com-drupal">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/Websites/www.someone.com/trunk/" username="java-builder" password="*******" dest="source">
          <filter>
            <ignore pattern="etc/**/*.*" />
          </filter>
        </svn>

      </materials>
      <stage name="BuildRpm">
        <jobs>
          <job name="DefaultBuild">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-www-someone-com-drupal" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="mcctools">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/mcctools/trunk/" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>

          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-mcctools" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">

          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="mcctools" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />

              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />

            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="mcctools-etc">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/mcctools/trunk/etc/" username="java-builder" password="*******" dest="etc" />

      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-java-mcctools-etc" workingdir="etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="etc" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="etc/target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
      <stage name="DeployToBetasRepo">
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="mcctools-etc" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" workingdir="etc" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" workingdir="etc" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="etc/target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="Bonnington">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/someone.bonnington/trunk" username="java-builder" password="*******" dest="javaSource" />
        <svn url="https://svn.someone.lan/svn/ServiceDelivery/someone.bonnington.ear/trunk" username="java-builder" password="*******" dest="earSource" />
      </materials>
      <stage name="CompileJava">

        <jobs>
          <job name="Compile">
            <tasks>
              <exec command="mvn" args="clean install" workingdir="javaSource" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>

            <artifacts>
              <artifact src="javaSource/target/bonnington-ejb-0.0.1-SNAPSHOT.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="CompileEAR">
        <jobs>
          <job name="Compile">

            <tasks>
              <exec command="mvn" args="clean package" workingdir="earSource" />
              <exec command="/home/builder/tools/specs/setrevision.sh" args=". sv_release.txt" workingdir="earSource" />
              <exec command="/home/builder/tools/specs/setrevision.sh" args=". sv_release.txt" workingdir="earSource/etc" />
            </tasks>
            <resources>
              <resource>working_mvn</resource>
            </resources>

            <artifacts>
              <artifact src="earSource/target/someone-bonnington-ear-0.0.1-SNAPSHOT.ear" />
              <artifact src="earSource/sv_release.txt" />
              <artifact src="earSource/etc" dest="earetc" />
              <artifact src="earSource/etc/sv_release.txt" dest="earetc" />
            </artifacts>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="RPM-sv-php-ScoringApp">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/Websites/scoring.someone.com/trunk/" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">

            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-php-scoringapp" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="AutoDeployment">
        <approval type="manual" />
        <jobs>

          <job name="DeployToVm64">
            <tasks>
              <exec command="/usr/bin/perl" args="/home/builder/tmp/ad/autodeployer.pl vm64 scoringapp" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>

        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>

        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="RPM-sv-php-ScoringApp" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh deploytobeta" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh createbetarepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="BetaAutoDeployment">
        <approval type="manual" />
        <jobs>
          <job name="DeployToBeta">
            <tasks>

              <exec command="/usr/bin/perl" args="/home/builder/tmp/ad/autodeployer.pl bmarwww01 scoringapp" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>

    </pipeline>
    <pipeline name="custcare.someone.com">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/Websites/custcare.someone.com/trunk/" username="java-builder" password="*******" dest="custcare" />
      </materials>
      <stage name="BuildRpm">
        <jobs>
          <job name="DefaultBuild">

            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="custcare" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-www-someone.custcare" workingdir="custcare" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="custcare" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

            <artifacts>
              <artifact src="custcare/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="www.avaya-demo.someone.com">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />

      <materials>
        <svn url="https://svn.someone.lan/svn/Websites/www.avaya-demo.someone.com/trunk/" username="java-builder" password="*******" dest="avayademo" />
      </materials>
      <stage name="BuildRpm">
        <jobs>
          <job name="DefaultBuild">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="avayademo" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-www-someone.avaya-demo" workingdir="avayademo" />

              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="avayademo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="avayademo/target/rpm" />
            </artifacts>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="blog.someone.com">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/Websites/blog.someone.com/" username="java-builder" password="*******" dest="blog" />
      </materials>

      <stage name="BuildRPMs">
        <jobs>
          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="blog" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-www-someone.blog" workingdir="blog" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="blog" />
            </tasks>
            <resources>

              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="blog/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>

      <stage name="DeployToBetasRepo">
        <approval type="manual">
          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">

            <tasks>
              <fetchartifact stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />
              <exec command="/home/builder/tools/specs/build.sh" args="deploytobeta" />
              <exec command="/home/builder/tools/specs/build.sh" args="createbetarepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>

          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="speakbox.someone.com">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/Websites/speakbox.someone.com/trunk/" username="java-builder" password="*******" dest="speakbox" />
      </materials>

      <stage name="BuildRpm">
        <jobs>
          <job name="DefaultBuild">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="speakbox" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-www-someone-speakbox" workingdir="speakbox" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-www-someone-speakbox-etc" workingdir="speakbox" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="speakbox" />
            </tasks>

            <resources>
              <resource>rpm_build</resource>
            </resources>
            <artifacts>
              <artifact src="speakbox/target/rpm" />
            </artifacts>
          </job>
        </jobs>

      </stage>
    </pipeline>
    <pipeline name="cs-honeypot.someone.com">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/Websites/cs-honeypot.someone.com/" username="java-builder" password="*******" dest="source" />
      </materials>
      <stage name="BuildRPMs">
        <jobs>

          <job name="BuildRPMs">
            <tasks>
              <exec command="/home/builder/tools/specs/build.sh" args="clean" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="build sv-www-someone-cs-honeypot" workingdir="source" />
              <exec command="/home/builder/tools/specs/build.sh" args="createdevrepo" workingdir="source" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>

            </resources>
            <artifacts>
              <artifact src="source/target/rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployToBetasRepo">
        <approval type="manual">

          <authorization>
            <role>beta</role>
          </authorization>
        </approval>
        <jobs>
          <job name="DeployToBeta">
            <tasks>
              <fetchartifact pipeline="cs-honeypot.someone.com" stage="BuildRPMs" job="BuildRPMs" srcdir="rpm" />

              <exec command="bash" args="/home/builder/tools/specs/build.sh deploytobeta" />
              <exec command="bash" args="/home/builder/tools/specs/build.sh createbetarepo" />
            </tasks>
            <resources>
              <resource>rpm_build</resource>
            </resources>
          </job>
        </jobs>

      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="QCTools">
    <pipeline name="Tenzing.Trunk">
      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/QCTools/trunk/" username="java-builder" password="*******" dest="Tenzing" />
      </materials>

      <stage name="Build.Tenzing">
        <jobs>
          <job name="Build.Tenzing.Debug">
            <tasks>
              <exec command="C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild.exe" args=" tenzing.sln /consoleloggerparameters:ErrorsOnly /verbosity:detailed /p:Configuration=Debug /t:build" workingdir="tenzing\sourcecode" />
            </tasks>
            <resources>
              <resource>Tenzing</resource>

            </resources>
          </job>
          <job name="Build.Tenzing.Release">
            <tasks>
              <exec command="C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild.exe" args=" tenzing.sln /verbosity:detailed /p:Configuration=Release /t:build" workingdir="tenzing\sourcecode" />
            </tasks>
            <resources>
              <resource>Tenzing</resource>

            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="Build.TeamLeaderTool">
        <jobs>
          <job name="Build.TeamLeaderTool.Release">
            <tasks>
              <exec command="C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild.exe" args=" teamleadertool.sln /consoleloggerparameters:ErrorsOnly /verbosity:normal /p:Configuration=Release /t:build" workingdir="tenzing\sourcecode\teamleadertool" />

            </tasks>
            <resources>
              <resource>Tenzing</resource>
            </resources>
          </job>
          <job name="Build.TeamLeaderTool.Debug">
            <tasks>
              <exec command="C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild.exe" args=" teamleadertool.sln /consoleloggerparameters:ErrorsOnly /verbosity:normal /p:Configuration=Debug /t:build" workingdir="tenzing\sourcecode\teamleadertool" />

            </tasks>
            <resources>
              <resource>Tenzing</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="Tests.Tenzing">

        <approval type="manual" />
        <jobs>
          <job name="Tests.Tenzing.Release.Himalaya.Controls.MessageControl.Tests">
            <tasks>
              <exec command="C:\Program Files\NUnit 2.5.2\bin\net-2.0\nunit-console.exe" args=" Himalaya.Controls.MessageControl.Tests.nunit" workingdir="Tenzing\Testing\Himalaya\Himalaya.Controls.MessageControl.Tests\bin\Release" />
            </tasks>
            <resources>
              <resource>Tenzing</resource>

            </resources>
            <artifacts>
              <test src="Tenzing\Testing\Himalaya\Himalaya.Controls.MessageControl.Tests\bin\Release\TestResults.xml" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Tenzing.3.2.0">

      <trackingtool link="https://jira.dev.someone.com:444/browse/${ID}" regex="([A-Z]+-\d+)" />
      <materials>
        <svn url="https://svn.someone.lan/svn/QCTools/branches/3.2.0" username="java-builder" password="*******" dest="Tenzing" />
      </materials>
      <stage name="Build.Tenzing">
        <jobs>
          <job name="Build.Tenzing.Debug">
            <tasks>
              <exec command="C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild.exe" args=" tenzing.sln /consoleloggerparameters:ErrorsOnly /verbosity:detailed /p:Configuration=Debug /t:build" workingdir="tenzing\sourcecode" />

            </tasks>
            <resources>
              <resource>Tenzing</resource>
            </resources>
          </job>
          <job name="Build.Tenzing.Release">
            <tasks>
              <exec command="C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild.exe" args=" tenzing.sln /verbosity:detailed /p:Configuration=Release /t:build" workingdir="tenzing\sourcecode" />

            </tasks>
            <resources>
              <resource>Tenzing</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="Build.TeamLeaderTool">

        <jobs>
          <job name="Build.TeamLeaderTool.Release">
            <tasks>
              <exec command="C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild.exe" args=" teamleadertool.sln /consoleloggerparameters:ErrorsOnly /verbosity:normal /p:Configuration=Release /t:build" workingdir="tenzing\sourcecode\teamleadertool" />
            </tasks>
            <resources>
              <resource>Tenzing</resource>
            </resources>

          </job>
          <job name="Build.TeamLeaderTool.Debug">
            <tasks>
              <exec command="C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild.exe" args=" teamleadertool.sln /consoleloggerparameters:ErrorsOnly /verbosity:normal /p:Configuration=Debug /t:build" workingdir="tenzing\sourcecode\teamleadertool" />
            </tasks>
            <resources>
              <resource>Tenzing</resource>
            </resources>

          </job>
        </jobs>
      </stage>
      <stage name="Tests.Tenzing">
        <approval type="manual" />
        <jobs>
          <job name="Tests.Tenzing.Release.Himalaya.Controls.MessageControl.Tests">
            <tasks>
              <exec command="C:\Program Files\NUnit 2.5.2\bin\net-2.0\nunit-console.exe" args=" Himalaya.Controls.MessageControl.Tests.nunit" workingdir="Tenzing\Testing\Himalaya\Himalaya.Controls.MessageControl.Tests\bin\Release" />

            </tasks>
            <resources>
              <resource>Tenzing</resource>
            </resources>
            <artifacts>
              <test src="Tenzing\Testing\Himalaya\Himalaya.Controls.MessageControl.Tests\bin\Release\TestResults.xml" />
            </artifacts>
          </job>

        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <agents>
    <agent hostname="builder.someone.lan" ipaddress="10.0.16.128" uuid="b4089a66-8b81-4a9b-96e3-979ebff1be3d">
      <resources>
        <resource>rpm_build</resource>

        <resource>SLES</resource>
      </resources>
    </agent>
    <agent hostname="vm62.someone.lan" ipaddress="10.0.16.190" uuid="967049c3-97fe-4ac5-b24c-4d82bc2955bb">
      <resources>
        <resource>SLES</resource>
        <resource>working_mvn</resource>

        <resource>mvn_deploy</resource>
        <resource>jsch</resource>
        <resource>ais_settings</resource>
        <resource>cruise_java_build</resource>
        <resource>asr_test</resource>
      </resources>

    </agent>
    <agent hostname="vm63" ipaddress="10.0.16.191" uuid="02aecc5d-8224-4406-b0be-549f18d65b0f">
      <resources>
        <resource>SLES</resource>
        <resource>gcc</resource>
        <resource>working_mvn</resource>
        <resource>ais_settings</resource>

        <resource>cruise_java_build</resource>
        <resource>asr_test</resource>
      </resources>
    </agent>
    <agent hostname="amardev03" ipaddress="10.0.16.38" uuid="2eab253c-0a4e-4155-93b5-aefc4b8e137b">
      <resources>
        <resource>SUSE</resource>

        <resource>performance</resource>
        <resource>lattice</resource>
        <resource>asr_test</resource>
        <resource>cruise_java_build</resource>
      </resources>
    </agent>
    <agent hostname="amardev01.someone.lan" ipaddress="10.0.16.36" uuid="37f7b97e-5f7b-45b8-a86e-d81f6e5bd3b2">

      <resources>
        <resource>lattice</resource>
        <resource>ASR</resource>
        <resource>SUSE</resource>
        <resource>asr_test</resource>
        <resource>cruise_java_build</resource>

      </resources>
    </agent>
    <agent hostname="dmarasr01" ipaddress="10.0.16.27" uuid="7397588b-851f-499a-9aa8-976274453aae">
      <resources>
        <resource>.netX</resource>
        <resource>WindowsX</resource>
        <resource>Windows</resource>

        <resource>.net</resource>
      </resources>
    </agent>
    <agent hostname="vm97" ipaddress="10.0.16.225" uuid="3c9139d6-3845-4379-b09f-06aad5ac8ed5">
      <resources>
        <resource>build</resource>
        <resource>vm97</resource>

        <resource>mono</resource>
        <resource>dbrestore</resource>
        <resource>not_running_nrpe</resource>
        <resource>somemessages_odbc</resource>
        <resource>.net</resource>
        <resource>msfendpoint_jboss</resource>

        <resource>SUSE</resource>
        <resource>jsch</resource>
        <resource>asr_test</resource>
      </resources>
    </agent>
    <agent hostname="vm23" ipaddress="10.0.16.151" uuid="6ee958b9-b5fc-46e8-9c90-ec2cf6ded407">
      <resources>

        <resource>SUSE</resource>
        <resource>not_running_nrpe</resource>
        <resource>working_mvn</resource>
        <resource>cruise_java_build</resource>
        <resource>asr_test</resource>
      </resources>

    </agent>
    <agent hostname="windows-vm66" ipaddress="10.0.16.194" uuid="ed87cf2e-9920-4e88-8584-185a429f9c8b">
      <resources>
        <resource>Windows</resource>
        <resource>vm66</resource>
        <resource>.net</resource>
      </resources>

    </agent>
    <agent hostname="amardev02.someone.lan" ipaddress="10.0.16.37" uuid="4d93b02a-46a6-46e4-bd81-e136869f88e6" />
    <agent hostname="vm65" ipaddress="10.0.16.193" uuid="0b7c32d8-bc0e-4911-a7ed-93069f471ec2">
      <resources>
        <resource>SLES</resource>
        <resource>cruise_java_build</resource>
        <resource>working_mvn</resource>

        <resource>ais_settings</resource>
        <resource>asr_test</resource>
      </resources>
    </agent>
    <agent hostname="vm102.someone.lan" ipaddress="10.0.16.230" uuid="58f27e2c-f74e-4bc7-a104-4a67bde51e08">
      <resources>
        <resource>SLES11</resource>

        <resource>ruby</resource>
      </resources>
    </agent>
    <agent hostname="dmarbld01" ipaddress="10.0.16.11" uuid="ba30ea78-861f-4c66-83bd-07c72d12ba65">
      <resources>
        <resource>dmarbld01</resource>
      </resources>
    </agent>

    <agent hostname="vm95" ipaddress="10.0.16.223" uuid="3f7bd5c8-1575-4306-ba1e-746325e176c2" isDenied="true" />
    <agent hostname="vm25" ipaddress="10.0.16.153" uuid="61664d61-e0e1-41aa-9d07-9ba22bbaa30a" isDenied="true" />
    <agent hostname="dlogasr01.local.someone.com" ipaddress="10.20.17.11" uuid="9f86d707-509e-44fc-b0a1-e68cb6a3c8fd">
      <resources>
        <resource>ASG</resource>
      </resources>
    </agent>
    <agent hostname="lloglab01.localis.someone.com" ipaddress="10.20.64.17" uuid="54420095-51e3-485f-975c-0b9930196e58">

      <resources>
        <resource>super_shiny_box owned by Chris Funderburg</resource>
      </resources>
    </agent>
    <agent hostname="dmarsvc04" ipaddress="10.0.16.43" uuid="8594fac3-d969-46bd-b6ae-6066e2cbbf9e" isDenied="true">
      <resources>
        <resource>cruise_java_build</resource>
      </resources>

    </agent>
    <agent hostname="builder" ipaddress="10.0.16.128" uuid="d3e5b333-0240-49d6-b622-650fad9c371b" isDenied="true">
      <resources>
        <resource>rpm_build</resource>
      </resources>
    </agent>
    <agent hostname="QCtest2" ipaddress="10.0.5.248" uuid="6aebc912-51bc-4e67-a61c-bd1eb6b2b916">
      <resources>

        <resource>Tenzing</resource>
        <resource>Nunit252</resource>
      </resources>
    </agent>
  </agents>
</cruise>

