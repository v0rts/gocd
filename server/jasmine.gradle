import com.thoughtworks.go.build.DownloaderTask
import com.thoughtworks.go.build.ExecuteUnderRailsTask
import org.gradle.internal.os.OperatingSystem

import java.util.regex.Pattern

/*
 * Copyright 2022 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

OperatingSystem currentOS = OperatingSystem.current()

// Chrome:        See https://chromedriver.chromium.org/downloads  Must match version of Chrome on build host
// Firefox/gecko: See https://github.com/mozilla/geckodriver/releases and review compatibility at
//                https://firefox-source-docs.mozilla.org/testing/geckodriver/Support.html
final Map<String, String> seleniumDrivers = [
  chromedriver: '98.0.4758.80',
  geckodriver: '0.30.0',
]

def execute = { String path, String... argv ->
  ByteArrayOutputStream stdout = new ByteArrayOutputStream()

  try {
    project.exec {
      def pathVariable = 'PATH'
      if(currentOS.isWindows()) {
        // because windows PATH variable is case-insensitive :-/
        pathVariable = environment.keySet().find {eachKey -> eachKey.toUpperCase().equals("PATH")}
      }
      environment[pathVariable] = path
      executable = argv.head()

      // java's ProcessBuilder does not lookup executables on `PATH` specified in the environment map
      // it instead looks up executable on the PATH of the caller.
      def executableName = currentOS.getExecutableName(executable)

      for(String entryInPath : path.split(Pattern.quote(File.pathSeparator))) {
        def candidateExecutable = new File(entryInPath, executableName)
        if (candidateExecutable.isFile() && candidateExecutable.canExecute()) {
          executable = candidateExecutable;
          break;
        }
      }

      args(argv.tail())
      standardOutput = stdout
      errorOutput = stdout
      ignoreExitValue = true
    }
  } catch (Exception ignored) {
    return "could not determine version!"
  }

  return stdout.toString().trim()
}

def browser = { ->
  if (System.getenv('BROWSER')) {
    return System.getenv('BROWSER')
  }

  return 'firefox'
}

def browserExecutable = { String path ->
  def separator = "=" * 72
  println "Browser versions"
  println(separator)
  switch(browser()) {
    case 'chrome':
      println("       chrome: ${execute(path, "google-chrome", "--version")}")
      println(" chromedriver: ${execute(path, "chromedriver", "--version").readLines().first()}")
      return;
    default:
      println("     firefox: ${execute(path, "firefox", "--version")}")
      println(" geckodriver: ${execute(path, "geckodriver", "--version").readLines().first()}")
      return;
  }
}

def driverImpl = { ->
  switch(browser()) {
    case 'chrome':
      return downloadChromeDriver
    default:
      return downloadGeckoDriver
  }
}

task downloadGeckoDriver(type: DownloaderTask) { thisTask ->
  executable = 'geckodriver'
  packageName = 'geckodriver'
  packageVersion = seleniumDrivers.geckodriver

  String osURIPart;
  String archiveExtension  = currentOS.isWindows() ? 'zip' : 'tar.gz';

  switch (currentOS) {
    case OperatingSystem.MacOs:
      osURIPart = 'macos';
      break
    case OperatingSystem.Windows:
      osURIPart = 'win64'
      break
    default:
      osURIPart = 'linux64'
      break;
  }
  url = "https://github.com/mozilla/geckodriver/releases/download/v${packageVersion}/geckodriver-v${packageVersion}-${osURIPart}.${archiveExtension}"
}

task downloadChromeDriver(type: DownloaderTask) { thisTask ->
  executable = 'chromedriver'
  packageName = 'chromedriver'
  packageVersion = seleniumDrivers.chromedriver

  String osURIPart;

  switch (currentOS) {
    case OperatingSystem.MacOs:
      osURIPart = 'mac64';
      break
    case OperatingSystem.Windows:
      osURIPart = 'win32'
      break
    default:
      osURIPart = 'linux64'
      break;
  }
  url = "https://chromedriver.storage.googleapis.com/${packageVersion}/chromedriver_${osURIPart}.zip"
}

task karma(type: Exec) {
  dependsOn ':server:yarnInstall'
  dependsOn ':server:compileAssetsDev'

  outputs.upToDateWhen { false }

  description = 'Run new jasmine tests'

  standardOutput = System.out
  errorOutput = System.err

  commandLine = [OperatingSystem.current().isWindows() ? "yarn.cmd" : "yarn", "run", "jasmine-ci"]
  workingDir = project.railsRoot

  doFirst {
    println "[${workingDir}]\$ ${executable} ${args.join(' ')}"
  }

}

task jasmineOld(type: ExecuteUnderRailsTask) {
  dependsOn driverImpl()

  outputs.upToDateWhen { false }

  description = 'Run old jasmine tests'

  environment += [
    'RAILS_ENV'          : 'test',
    'REPORTERS'          : 'console,junit',
    'BROWSER'            : browser(),
  ]

  jvmArgs += [
          // Address JRuby: WARN FilenoUtil : Native subprocess control requires open access to the JDK IO subsystem
          '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED',
          '--add-opens=java.base/java.io=ALL-UNNAMED'
  ]
  args = ['-S', 'rails', 'jasmine:ci']
  maxHeapSize = '2g'

  doFirst {
    def additionalPaths = [
      driverImpl().ext.outputDir
    ]

    additionalPaths += environment['PATH']

    environment['PATH'] = additionalPaths.join(File.pathSeparator)
    browserExecutable(environment['PATH'])
  }
}

task jasmine(dependsOn: [karma, jasmineOld])

task jasmineKarmaServer(type: Exec) {
  dependsOn ':server:yarnInstall'
  dependsOn ':server:compileAssetsDev'
  outputs.upToDateWhen { false }

  description = 'Run new jasmine tests'

  standardOutput = System.out
  errorOutput = System.err

  commandLine = [OperatingSystem.current().isWindows() ? "yarn.cmd" : "yarn", "run", "karma"]
  workingDir = project.railsRoot

  doFirst {
    println "[${workingDir}]\$ ${executable} ${args.join(' ')}"
  }
}

task jasmineOldServer(type: ExecuteUnderRailsTask) {
  description 'Run a web server to run jasmine tests locally'

  environment += [
    'RAILS_ENV'          : 'test',
    'REPORTERS'          : 'console, junit',
  ]

  args = ["-S", "rails", "--trace", "jasmine:server"]
}
