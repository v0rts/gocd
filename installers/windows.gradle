/*
 * Copyright 2022 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import com.thoughtworks.go.build.AdoptiumUrlHelper
import com.thoughtworks.go.build.DownloadFile
import com.thoughtworks.go.build.InstallerType
import org.apache.commons.codec.digest.DigestUtils
import org.apache.tools.ant.filters.FixCrLfFilter

private File destFile(String url) {
  new File(gradle.gradleUserHomeDir, "download-cache/${DigestUtils.md5Hex(url)}/${new File(new URL(url).path).name}")
}

task downloadWindowsJreChecksum(type: DownloadFile) {
  def srcUrl = AdoptiumUrlHelper.sha256sumURL(
    com.thoughtworks.go.build.OperatingSystem.windows,
    project.packaging.adoptOpenjdk.featureVersion,
    project.packaging.adoptOpenjdk.interimVersion,
    project.packaging.adoptOpenjdk.updateVersion,
    project.packaging.adoptOpenjdk.buildVersion
  )
  src srcUrl
  dest destFile(srcUrl)
}

task downloadWindowsJre(type: DownloadFile) {
  dependsOn downloadWindowsJreChecksum
  def srcUrl = AdoptiumUrlHelper.downloadURL(
    com.thoughtworks.go.build.OperatingSystem.windows,
    project.packaging.adoptOpenjdk.featureVersion,
    project.packaging.adoptOpenjdk.interimVersion,
    project.packaging.adoptOpenjdk.updateVersion,
    project.packaging.adoptOpenjdk.buildVersion
  )
  src srcUrl
  dest destFile(srcUrl)
  checksum = { downloadWindowsJreChecksum.outputs.files.singleFile.getText("utf-8").trim().split(" ").first() }
}

def configureWindowsFilesystem(Task windowsInstallerTask, InstallerType installerType, Zip genericZipTask, File buildRoot) {
  windowsInstallerTask.with {
    group project.name
    description "Build the ${installerType.baseName} windows (exe) installer"

    dependsOn downloadWindowsJre
    dependsOn genericZipTask

    doFirst {
      project.delete(buildRoot)
      project.mkdir(project.file("${project.buildDir}/distributions/win"))

      def genericZipTree = zipTree(genericZipTask.archiveFile)

      project.copy {
        into buildRoot

        // dont include the wrapper.conf, and tanuki wrappers for OSes other than windows
        from(genericZipTree) {
          exclude "${installerType.baseName}-${project.goVersion}/wrapper-config/wrapper.conf"
          exclude "${installerType.baseName}-${project.goVersion}/wrapper/wrapper-*"
          exclude "${installerType.baseName}-${project.goVersion}/wrapper/libwrapper-*"
          exclude "${installerType.baseName}-${project.goVersion}/bin/*"
        }

        from(genericZipTree) {
          include "${installerType.baseName}-${project.goVersion}/wrapper/*.dll"
          include "${installerType.baseName}-${project.goVersion}/wrapper/*.exe"
          include "${installerType.baseName}-${project.goVersion}/bin/*.bat"
        }

        from("include/wrapper-properties.${installerType.baseName}.conf.example") {
          into "${installerType.baseName}-${project.goVersion}/wrapper-config"
          rename ".*", "wrapper-properties.conf.example"
        }

        // include the wrapper.conf, but replace the java command
        from(genericZipTree) {
          include "${installerType.baseName}-${project.goVersion}/wrapper-config/wrapper.conf"
          filter { String eachLine ->
            if (eachLine == 'wrapper.java.command=java') {
              eachLine = 'wrapper.java.command=jre/bin/java'
            }
            eachLine
          }

          filter { String eachLine ->
            eachLine = eachLine.replaceAll("=${installerType.baseName}".toString(), "=${installerType.windowsAndOSXServiceName}".toString())
            return eachLine
          }

          filter(FixCrLfFilter.class, eol: FixCrLfFilter.CrLf.DOS)
        }

        from(zipTree(downloadWindowsJre.outputs.files.singleFile)) {
          eachFile { FileCopyDetails fcd ->
            List<String> segments = fcd.relativePath.segments
            segments.set(1, "jre")
            fcd.relativePath = new RelativePath(!fcd.isDirectory(), (segments as String[]))
          }
          includeEmptyDirs = false
          // relative to parent copy task's `into`
          into "${installerType.baseName}-${project.goVersion}"
        }
      }
    }
  }
}

def executeNSIS(InstallerType installerType, File buildRoot, File destDir) {

  project.mkdir(destDir)

  def flavor = "64bit"

  def outputFile = project.file("${destDir.path}/${installerType.baseName}-${project.fullVersion}-jre-${flavor}-setup.exe")

  // pad enough zeros to be able to convert the version string using simple numbers, instead of version numbers
  def registryVersionString = "${project.goVersion.split(/\./).collect { it.padLeft(2, '0') }.join()}${project.distVersion.padLeft(5, '0')}"

  def installerContents = project.file("${buildRoot.path}/${installerType.baseName}-${project.goVersion}")

  def unInstallManifestFile = project.file("${buildRoot.path}/uninstall-manifest.nsi")

  unInstallManifestFile.withWriter { out ->
    project.fileTree(installerContents).forEach({ File eachFile ->
      out.println("Delete \"\$INSTDIR\\${installerContents.relativePath(eachFile).replaceAll("/", "\\\\")}\"")
    })
  }

  List<String> cmdArgs = [
    "-DADDITIONAL_PLUGINS_DIR=${project.file("windows/nsis-plugins")}",
    "-DCOMPONENT_FULL_VERSION=${project.fullVersion}",
    "-DCOMPONENT_NAME=${installerType.baseName.replace("go-", "").capitalize()}",
    "-DCOMPONENT_REGISTRY_VERSION=${registryVersionString}",
    "-DCOMPONENT_VERSION=${project.goVersion}",
    "-DCUSTOM_PAGES=${installerType.baseName}-custom-page.nsi",
    "-DENABLE_LOGGING=true",
    "-DGOCD_ICON=${project.file('windows/gocd.ico')}",
    "-DGOCD_LICENSE_FILE=${rootProject.file("LICENSE")}",
    "-DINSTALLER_CONTENTS=${installerContents.path}",
    "-DOUTPUT_FILE=${outputFile.path}",
    "-DUNINSTALL_MANIFEST_FILE=${unInstallManifestFile.path}",
    "-DWINDOWS_PRODUCT_VERSION=${project.goVersion}.${project.distVersion}",
  ]

  cmdArgs += ["-V4"] // verbose

  project.exec { ExecSpec execSpec ->
    commandLine = (["makensis"] + cmdArgs + [project.file("windows/${installerType.baseName}.nsi").path])

    standardOutput = System.out
    errorOutput = System.err

    println "[${execSpec.workingDir}]\$ ${execSpec.executable} ${execSpec.args.join(' ')}"
  }
}

task agentWindows64bitExe { DefaultTask thisTask ->
  def installerType = InstallerType.agent
  def buildRoot = project.file("${project.buildDir.path}/${installerType.baseName}/win/BUILD_ROOT")
  def destDir = project.file("${project.buildDir}/distributions/win")

  configureWindowsFilesystem(thisTask, installerType, agentGenericZip, buildRoot)

  doLast {
    project.copy { from('go-agent/win/ServerURL.ini') into(buildRoot) }
  }

  doLast {
    executeNSIS(installerType, buildRoot, destDir)
  }
}

task serverWindows64bitExe { DefaultTask thisTask ->
  def installerType = InstallerType.server
  def buildRoot = project.file("${project.buildDir.path}/${installerType.baseName}/win/BUILD_ROOT")
  def destDir = project.file("${project.buildDir}/distributions/win")

  configureWindowsFilesystem(thisTask, installerType, serverGenericZip, buildRoot)

  doLast {
    executeNSIS(installerType, buildRoot, destDir)
  }
}

assemble.dependsOn(":installers:agentWindows64bitExe", ":installers:serverWindows64bitExe")
