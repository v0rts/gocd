import com.thoughtworks.go.build.AdoptiumUrlHelper
import com.thoughtworks.go.build.DownloadFile
import com.thoughtworks.go.build.InstallerType
import org.apache.commons.codec.digest.DigestUtils

/*
 * Copyright 2022 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

private File destFile(String url) {
  new File(gradle.gradleUserHomeDir, "download-cache/${DigestUtils.md5Hex(url)}/${new File(new URL(url).path).name}")
}

task downloadOsxJreChecksum(type: DownloadFile) {
  def srcUrl = AdoptiumUrlHelper.sha256sumURL(
    com.thoughtworks.go.build.OperatingSystem.mac,
    project.packaging.adoptOpenjdk.featureVersion,
    project.packaging.adoptOpenjdk.interimVersion,
    project.packaging.adoptOpenjdk.updateVersion,
    project.packaging.adoptOpenjdk.buildVersion
  )
  src srcUrl
  dest destFile(srcUrl)
}

task downloadOsxJre(type: DownloadFile) {
  dependsOn downloadOsxJreChecksum
  def srcUrl = AdoptiumUrlHelper.downloadURL(
    com.thoughtworks.go.build.OperatingSystem.mac,
    project.packaging.adoptOpenjdk.featureVersion,
    project.packaging.adoptOpenjdk.interimVersion,
    project.packaging.adoptOpenjdk.updateVersion,
    project.packaging.adoptOpenjdk.buildVersion
  )
  src srcUrl
  dest destFile(srcUrl)
  checksum = { downloadOsxJreChecksum.outputs.files.singleFile.getText("utf-8").trim().split(" ").first() }
}

def configureOSXZip(Zip zipTask, InstallerType installerType, Zip genericZipTask) {
  zipTask.with {
    group project.name
    description "Build the ${installerType.baseName} osx (zip) installer"

    dependsOn downloadOsxJre
    dependsOn genericZipTask
    destinationDirectory = file("${project.buildDir.path}/${project.distsDirName}/osx")
    archiveBaseName = installerType.baseName
    archiveClassifier = 'osx'

    def genericZipTree = zipTree(genericZipTask.archiveFile)

    // dont include the wrapper.conf, and tanuki wrappers for OSes other than osx
    from(genericZipTree) {
      exclude "${installerType.baseName}-${project.goVersion}/wrapper-config/wrapper.conf"
      exclude "${installerType.baseName}-${project.goVersion}/wrapper/wrapper-*"
      exclude "${installerType.baseName}-${project.goVersion}/wrapper/libwrapper-*"
      exclude "${installerType.baseName}-${project.goVersion}/bin/*.bat"
    }

    from(genericZipTree) {
      include "${installerType.baseName}-${project.goVersion}/wrapper/wrapper-macosx-*"
      include "${installerType.baseName}-${project.goVersion}/wrapper/libwrapper-macosx-*"
    }

    // include the wrapper.conf, but replace the java command
    from(genericZipTree) {
      include "${installerType.baseName}-${project.goVersion}/wrapper-config/wrapper.conf"
      filter { String eachLine ->
        if (eachLine == 'wrapper.java.command=java') {
          eachLine = 'wrapper.java.command=jre/Contents/Home/bin/java'
        }
        eachLine
      }
    }

    // puts the content of the tar under `go-{agent,server}-XXX/jre`
    from(tarTree(downloadOsxJre.outputs.files.singleFile)) {
      eachFile { FileCopyDetails fcd ->
        List<String> segments = fcd.relativePath.segments
        segments.set(1, "jre")
        fcd.relativePath = new RelativePath(!fcd.isDirectory(), (segments as String[]))
      }
      into("${installerType.baseName}-${project.goVersion}")
    }
  }
}

task agentOSXZip(type: Zip) { Zip thisTask ->
  configureOSXZip(thisTask, InstallerType.agent, agentGenericZip)
}

task serverOSXZip(type: Zip) { Zip thisTask ->
  configureOSXZip(thisTask, InstallerType.server, serverGenericZip)
}

assemble.dependsOn(":installers:agentOSXZip", ":installers:serverOSXZip")
